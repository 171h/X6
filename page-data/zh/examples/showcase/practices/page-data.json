{"componentChunkName":"component---node-modules-antv-gatsby-theme-antv-site-templates-example-tsx","path":"/zh/examples/showcase/practices","result":{"data":{"site":{"siteMetadata":{"title":"X6","examples":[{"slug":"showcase","icon":"case","title":{"zh":"场景案例","en":"Component"}},{"slug":"node","icon":"shape","title":{"zh":"节点","en":"Node"}},{"slug":"edge","icon":"link","title":{"zh":"边","en":"Edge"}},{"slug":"graph","icon":"tree","title":{"zh":"画布","en":"Graph"}},{"slug":"interaction","icon":"tool","title":{"zh":"交互定制","en":"Interaction"}},{"slug":"animation","icon":"scatter","title":{"zh":"动画","en":"Animation"}}],"playground":{"container":null,"playgroundDidMount":null,"playgroundWillUnmount":null,"dependencies":null,"htmlCodeTemplate":null}},"pathPrefix":""},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/en/examples/gallery"},"frontmatter":{"title":"Gallery","order":-1,"icon":"other"},"parent":{"__typename":"File","relativePath":"gallery/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/gallery"},"frontmatter":{"title":"所有图表","order":-1,"icon":"other"},"parent":{"__typename":"File","relativePath":"gallery/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/graph/scroller"},"frontmatter":{"title":"Scroller","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"graph/scroller/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/graph/scroller"},"frontmatter":{"title":"滚动画布","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"graph/scroller/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/edge"},"frontmatter":{"title":"Edge Interaction","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/edge/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/edge"},"frontmatter":{"title":"边的交互","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/edge/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/port"},"frontmatter":{"title":"Port Interaction","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/port/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/graph/snapline"},"frontmatter":{"title":"对齐线","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"graph/snapline/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/graph/snapline"},"frontmatter":{"title":"Snapline","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"graph/snapline/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/port"},"frontmatter":{"title":"连接桩的交互","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/port/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/edge/edge"},"frontmatter":{"title":"样式","order":10,"icon":null},"parent":{"__typename":"File","relativePath":"edge/edge/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/edge/edge"},"frontmatter":{"title":"Style","order":10,"icon":null},"parent":{"__typename":"File","relativePath":"edge/edge/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/node/native-node"},"frontmatter":{"title":"内置节点","order":10,"icon":null},"parent":{"__typename":"File","relativePath":"node/native-node/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/showcase/practices"},"frontmatter":{"title":"Practices","order":10,"icon":null},"parent":{"__typename":"File","relativePath":"showcase/practices/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/showcase/practices"},"frontmatter":{"title":"业务实践","order":10,"icon":null},"parent":{"__typename":"File","relativePath":"showcase/practices/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/node/custom-node"},"frontmatter":{"title":"自定义节点","order":11,"icon":null},"parent":{"__typename":"File","relativePath":"node/custom-node/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/node/custom-node"},"frontmatter":{"title":"Custom Node","order":11,"icon":null},"parent":{"__typename":"File","relativePath":"node/custom-node/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/node/native-node"},"frontmatter":{"title":"Native Node","order":11,"icon":null},"parent":{"__typename":"File","relativePath":"node/native-node/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/edge/marker"},"frontmatter":{"title":"箭头","order":20,"icon":null},"parent":{"__typename":"File","relativePath":"edge/marker/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/edge/marker"},"frontmatter":{"title":"Marker","order":20,"icon":null},"parent":{"__typename":"File","relativePath":"edge/marker/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/node/port"},"frontmatter":{"title":"链接桩","order":20,"icon":null},"parent":{"__typename":"File","relativePath":"node/port/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/node/port"},"frontmatter":{"title":"Port","order":20,"icon":null},"parent":{"__typename":"File","relativePath":"node/port/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/showcase/faq"},"frontmatter":{"title":"FAQ","order":20,"icon":null},"parent":{"__typename":"File","relativePath":"showcase/faq/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/showcase/faq"},"frontmatter":{"title":"常见问题","order":20,"icon":null},"parent":{"__typename":"File","relativePath":"showcase/faq/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/edge/label"},"frontmatter":{"title":"标签","order":30,"icon":null},"parent":{"__typename":"File","relativePath":"edge/label/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/edge/label"},"frontmatter":{"title":"Label","order":30,"icon":null},"parent":{"__typename":"File","relativePath":"edge/label/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/node/group"},"frontmatter":{"title":"Group","order":30,"icon":null},"parent":{"__typename":"File","relativePath":"node/group/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/node/group"},"frontmatter":{"title":"群组","order":30,"icon":null},"parent":{"__typename":"File","relativePath":"node/group/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/edge/router"},"frontmatter":{"title":"路由","order":40,"icon":null},"parent":{"__typename":"File","relativePath":"edge/router/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/edge/router"},"frontmatter":{"title":"Router","order":40,"icon":null},"parent":{"__typename":"File","relativePath":"edge/router/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/edge/connector"},"frontmatter":{"title":"Connector","order":50,"icon":null},"parent":{"__typename":"File","relativePath":"edge/connector/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/edge/connector"},"frontmatter":{"title":"连线","order":50,"icon":null},"parent":{"__typename":"File","relativePath":"edge/connector/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/edge/tool"},"frontmatter":{"title":"辅助工具","order":100,"icon":null},"parent":{"__typename":"File","relativePath":"edge/tool/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/edge/tool"},"frontmatter":{"title":"Edge Tools","order":100,"icon":null},"parent":{"__typename":"File","relativePath":"edge/tool/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/graph/interaction"},"frontmatter":{"title":"交互组件","order":100,"icon":null},"parent":{"__typename":"File","relativePath":"graph/interaction/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/graph/interaction"},"frontmatter":{"title":"Interactions","order":100,"icon":null},"parent":{"__typename":"File","relativePath":"graph/interaction/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/node/tool"},"frontmatter":{"title":"Node Tools","order":100,"icon":null},"parent":{"__typename":"File","relativePath":"node/tool/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/node/tool"},"frontmatter":{"title":"节点工具","order":100,"icon":null},"parent":{"__typename":"File","relativePath":"node/tool/index.zh.md"}}}]}},"pageContext":{"allDemos":[{"relativePath":"edge/connector/demo/jumpover.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/connector/demo/jumpover.ts","order":3,"filename":"jumpover.ts","title":{"zh":"跳线","en":"Jumpover Connector"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*YfAITIxsiFIAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Connector","order":350},"zh":{"title":"连线","order":350}}},{"relativePath":"edge/connector/demo/curve.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/connector/demo/curve.ts","order":4,"filename":"curve.ts","title":{"zh":"二次贝塞尔曲线","en":"Quadratic Bessel Curve"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*WJj5ToqfFz8AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Connector","order":350},"zh":{"title":"连线","order":350}}},{"relativePath":"edge/connector/demo/multiple-smooth-edges.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/connector/demo/multiple-smooth-edges.ts","order":6,"filename":"multiple-smooth-edges.ts","title":{"zh":"多条光滑曲线","en":"Multiple Smooth Edges"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*9b-SRYGRGToAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Connector","order":350},"zh":{"title":"连线","order":350}}},{"relativePath":"edge/connector/demo/normal.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/connector/demo/normal.ts","order":0,"filename":"normal.ts","title":{"zh":"默认连线","en":"Normal Connector"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*ItzNQb0v8QMAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Connector","order":350},"zh":{"title":"连线","order":350}}},{"relativePath":"edge/connector/demo/rounded.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/connector/demo/rounded.ts","order":1,"filename":"rounded.ts","title":{"zh":"圆角连线","en":"Rounded Connector"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*XeN0Q4kyuBMAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Connector","order":350},"zh":{"title":"连线","order":350}}},{"relativePath":"edge/connector/demo/smooth.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/connector/demo/smooth.ts","order":2,"filename":"smooth.ts","title":{"zh":"平滑连线（三次贝塞尔曲线）","en":"Smooth Connector"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*b7ETSqUNr00AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Connector","order":350},"zh":{"title":"连线","order":350}}},{"relativePath":"edge/edge/demo/custom-click-event.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/edge/demo/custom-click-event.ts","order":6,"filename":"custom-click-event.ts","title":{"zh":"自定义点击事件","en":"Custom Click Event"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*ZmhTRaPgOQgAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"样式","order":310},"en":{"title":"Style","order":310}}},{"relativePath":"edge/edge/demo/double-edge.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/edge/demo/double-edge.ts","order":2,"filename":"double-edge.ts","title":{"zh":"双线边","en":"Double Edge"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*oeAZSa0C8ZMAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"样式","order":310},"en":{"title":"Style","order":310}}},{"relativePath":"edge/edge/demo/cross-fill.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/edge/demo/cross-fill.ts","order":4,"filename":"cross-fill.ts","title":{"zh":"交错背景色","en":"Cross Filled Edge"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*e_nGTKT-IvwAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"样式","order":310},"en":{"title":"Style","order":310}}},{"relativePath":"edge/connector/demo/wobble.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/connector/demo/wobble.ts","order":5,"filename":"wobble.ts","title":{"zh":"随机摇摆线","en":"Custom Wobble Connector"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*A19zSqro4asAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Connector","order":350},"zh":{"title":"连线","order":350}}},{"relativePath":"edge/edge/demo/gradient.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/edge/demo/gradient.ts","order":3,"filename":"gradient.ts","title":{"zh":"渐变背景色","en":"Gradient Edge"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*ZwHVS56I4-oAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"样式","order":310},"en":{"title":"Style","order":310}}},{"relativePath":"edge/edge/demo/shadow-edge.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/edge/demo/shadow-edge.ts","order":1,"filename":"shadow-edge.ts","title":{"zh":"阴影边","en":"Shadow Edge"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*wlLJRbSOfnkAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"样式","order":310},"en":{"title":"Style","order":310}}},{"relativePath":"edge/edge/demo/edge.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/edge/demo/edge.ts","order":0,"filename":"edge.ts","title":{"zh":"默认边","en":"Default Edge"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*6UGgRb4EkuMAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"样式","order":310},"en":{"title":"Style","order":310}}},{"relativePath":"edge/label/demo/label-along-path.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/label/demo/label-along-path.ts","order":4,"filename":"label-along-path.ts","title":{"zh":"沿路径的 Label","en":"Label Along Path"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*OHSrQop8Z30AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"标签","order":330},"en":{"title":"Label","order":330}}},{"relativePath":"edge/edge/demo/shape-on-edge.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/edge/demo/shape-on-edge.ts","order":5,"filename":"shape-on-edge.ts","title":{"zh":"沿边长度方向上的图形","en":"Custom Shape On the Edge"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*-Fx8R7nNZuMAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"样式","order":310},"en":{"title":"Style","order":310}}},{"relativePath":"edge/label/demo/multi-labels.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/label/demo/multi-labels.ts","order":3,"filename":"multi-labels.ts","title":{"zh":"渲染多个 Label","en":"Render Multiple Labels"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*hHq7R4vqWjIAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"标签","order":330},"en":{"title":"Label","order":330}}},{"relativePath":"edge/label/demo/render-with-html.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/label/demo/render-with-html.ts","order":1,"filename":"render-with-html.ts","title":{"zh":"使用 HTML 渲染 Label","en":"Use HTML to Render Label"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*EN48Tbp7jcAAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"标签","order":330},"en":{"title":"Label","order":330}}},{"relativePath":"edge/label/demo/render-with-svg.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/label/demo/render-with-svg.ts","order":0,"filename":"render-with-svg.ts","title":{"zh":"使用 SVG 渲染 Label","en":"Use SVG to Render Label"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*g1_HTZNyfC0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"标签","order":330},"en":{"title":"Label","order":330}}},{"relativePath":"edge/label/demo/render-with-react.tsx","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/label/demo/render-with-react.tsx","order":2,"filename":"render-with-react.tsx","title":{"zh":"使用 React 渲染 Label","en":"Use React to Render Label"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*8Er1Tb89MaoAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"标签","order":330},"en":{"title":"Label","order":330}}},{"relativePath":"edge/marker/demo/custom-marker.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/marker/demo/custom-marker.ts","order":4,"filename":"custom-marker.ts","title":{"zh":"自定义复杂箭头","en":"Custom Marker with Complexity Path"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*AbVgSbIIzbEAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"箭头","order":320},"en":{"title":"Marker","order":320}}},{"relativePath":"edge/marker/demo/image-marker.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/marker/demo/image-marker.ts","order":3,"filename":"image-marker.ts","title":{"zh":"使用 image 自定义箭头","en":"Custom Marker with Image"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*9CphTZypdpkAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"箭头","order":320},"en":{"title":"Marker","order":320}}},{"relativePath":"edge/marker/demo/native-markers.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/marker/demo/native-markers.ts","order":0,"filename":"native-markers.ts","title":{"zh":"内置箭头","en":"Native Markers"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*qAg2R6KwA3wAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"箭头","order":320},"en":{"title":"Marker","order":320}}},{"relativePath":"edge/marker/demo/path-marker.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/marker/demo/path-marker.ts","order":1,"filename":"path-marker.ts","title":{"zh":"使用 path 自定义箭头","en":"Custom Marker with Path"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*pgIDSbj95uQAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"箭头","order":320},"en":{"title":"Marker","order":320}}},{"relativePath":"edge/marker/demo/shape-marker.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/marker/demo/shape-marker.ts","order":2,"filename":"shape-marker.ts","title":{"zh":"使用图形元素自定义箭头","en":"Custom Marker with Base Shapes"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*Ng-CRKYxOVgAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"箭头","order":320},"en":{"title":"Marker","order":320}}},{"relativePath":"edge/router/demo/custom-random-router.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/router/demo/custom-random-router.ts","order":6,"filename":"custom-random-router.ts","title":{"zh":"自定义随机路由","en":"Custom Random Router"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*byYNRLBM9_0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"路由","order":340},"en":{"title":"Router","order":340}}},{"relativePath":"edge/router/demo/manhattan.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/router/demo/manhattan.ts","order":4,"filename":"manhattan.ts","title":{"zh":"智能路由","en":"Manhattan Router"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*MaA1T5rdWVYAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"路由","order":340},"en":{"title":"Router","order":340}}},{"relativePath":"edge/router/demo/er.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/router/demo/er.ts","order":3,"filename":"er.ts","title":{"zh":"ER 路由","en":"ER Router"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*VoYhRZROYwMAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"路由","order":340},"en":{"title":"Router","order":340}}},{"relativePath":"edge/router/demo/metro.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/router/demo/metro.ts","order":5,"filename":"metro.ts","title":{"zh":"智能地铁路由","en":"Metro Router"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*guRmSZlF-oEAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"路由","order":340},"en":{"title":"Router","order":340}}},{"relativePath":"edge/router/demo/normal.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/router/demo/normal.ts","order":0,"filename":"normal.ts","title":{"zh":"默认路由","en":"Normal Router"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*rpQdR4VOZQMAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"路由","order":340},"en":{"title":"Router","order":340}}},{"relativePath":"edge/router/demo/one-side.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/router/demo/one-side.ts","order":2,"filename":"one-side.ts","title":{"zh":"单侧路由","en":"OneSide Router"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*H42jSbTYRyoAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"路由","order":340},"en":{"title":"Router","order":340}}},{"relativePath":"edge/tool/demo/arrowheads.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/tool/demo/arrowheads.ts","order":4,"filename":"arrowheads.ts","title":{"zh":"调整箭头","en":"Arrowheads"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*C3LbRodorDwAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"辅助工具","order":400},"en":{"title":"Edge Tools","order":400}}},{"relativePath":"edge/router/demo/orth.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/router/demo/orth.ts","order":1,"filename":"orth.ts","title":{"zh":"正交路由","en":"Orth Router"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*xdwhR5Z3PfAAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"路由","order":340},"en":{"title":"Router","order":340}}},{"relativePath":"edge/tool/demo/boundary.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/tool/demo/boundary.ts","order":5,"filename":"boundary.ts","title":{"zh":"包围框","en":"Boundary"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*dKabQoQ0lIMAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"辅助工具","order":400},"en":{"title":"Edge Tools","order":400}}},{"relativePath":"edge/tool/demo/button-remove.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/tool/demo/button-remove.ts","order":3,"filename":"button-remove.ts","title":{"zh":"删除按钮","en":"Remove Button"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*RG-YRr_drL0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"辅助工具","order":400},"en":{"title":"Edge Tools","order":400}}},{"relativePath":"edge/tool/demo/button.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/tool/demo/button.ts","order":2,"filename":"button.ts","title":{"zh":"自定义按钮","en":"Button"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*hbuoSbtyV6YAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"辅助工具","order":400},"en":{"title":"Edge Tools","order":400}}},{"relativePath":"edge/tool/demo/segments.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/tool/demo/segments.ts","order":1,"filename":"segments.ts","title":{"zh":"调整线段","en":"Segments"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*WGufTb4Dt2gAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"辅助工具","order":400},"en":{"title":"Edge Tools","order":400}}},{"relativePath":"edge/tool/demo/tooltip.tsx","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/tool/demo/tooltip.tsx","order":6,"filename":"tooltip.tsx","title":{"zh":"使用 AntD 的 Tooltip 组件","en":"Use AntD Tooltip with Edge"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*-W2ORbBVQgMAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"辅助工具","order":400},"en":{"title":"Edge Tools","order":400}}},{"relativePath":"edge/tool/demo/vertices.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/edge/tool/demo/vertices.ts","order":0,"filename":"vertices.ts","title":{"zh":"调整顶点","en":"Vertices"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*d_XRRa7kj2EAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"辅助工具","order":400},"en":{"title":"Edge Tools","order":400}}},{"relativePath":"graph/interaction/demo/zoom-background-image.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/graph/interaction/demo/zoom-background-image.ts","order":0,"filename":"zoom-background-image.ts","title":{"zh":"背景缩放","en":"Zoom Background"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*HBvTQIEza_MAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"交互组件","order":500},"en":{"title":"Interactions","order":500}}},{"relativePath":"graph/scroller/demo/scroller.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/graph/scroller/demo/scroller.ts","order":0,"filename":"scroller.ts","title":{"zh":"滚动画布","en":"Scroller"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*l_BLQJiDIYkAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Scroller","order":401},"zh":{"title":"滚动画布","order":401}}},{"relativePath":"interaction/edge/demo/meta.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/interaction/edge/demo/meta.ts","order":0,"filename":"meta.ts","title":{"zh":"按下 Meta 键后开始连线","en":"Start Connect After Press Meta"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*FgY8TJWw1TQAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Edge Interaction","order":501},"zh":{"title":"边的交互","order":501}}},{"relativePath":"graph/snapline/demo/snapline.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/graph/snapline/demo/snapline.ts","order":0,"filename":"snapline.ts","title":{"zh":"对齐线","en":"Snapline"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*cmi1SJ112qIAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"对齐线","order":402},"en":{"title":"Snapline","order":402}}},{"relativePath":"node/custom-node/demo/create-button-with-html.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/custom-node/demo/create-button-with-html.ts","order":3,"filename":"create-button-with-html.ts","title":{"zh":"渲染 HTML 按钮","en":"Custom Node with HTML"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*FtHyQoTAH6gAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"自定义节点","order":211},"en":{"title":"Custom Node","order":211}}},{"relativePath":"interaction/port/demo/visible.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/interaction/port/demo/visible.ts","order":0,"filename":"visible.ts","title":{"zh":"连接桩的显示/隐藏","en":"Show/Hide Port"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*kInJT758YB4AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Port Interaction","order":501},"zh":{"title":"连接桩的交互","order":502}}},{"relativePath":"node/custom-node/demo/custom-with-html.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/custom-node/demo/custom-with-html.ts","order":2,"filename":"custom-with-html.ts","title":{"zh":"使用 HTML 自定义节点","en":"Custom Node with HTML"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*I4YSRaxXsV4AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"自定义节点","order":211},"en":{"title":"Custom Node","order":211}}},{"relativePath":"node/custom-node/demo/custom-icon-with-svg.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/custom-node/demo/custom-icon-with-svg.ts","order":1,"filename":"custom-icon-with-svg.ts","title":{"zh":"使用 SVG 自定义图标","en":"Custom Node with SVG"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*jX20T6ewn_sAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"自定义节点","order":211},"en":{"title":"Custom Node","order":211}}},{"relativePath":"node/custom-node/demo/custom-with-svg.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/custom-node/demo/custom-with-svg.ts","order":0,"filename":"custom-with-svg.ts","title":{"zh":"使用 SVG 自定义节点","en":"Custom Node with SVG"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*PJn8T5hMua8AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"自定义节点","order":211},"en":{"title":"Custom Node","order":211}}},{"relativePath":"node/custom-node/demo/custom-with-react.tsx","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/custom-node/demo/custom-with-react.tsx","order":4,"filename":"custom-with-react.tsx","title":{"zh":"使用 React 自定节点","en":"Custom Node with React"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*_aX6Qb5gYz4AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"自定义节点","order":211},"en":{"title":"Custom Node","order":211}}},{"relativePath":"node/custom-node/demo/switch.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/custom-node/demo/switch.ts","order":5,"filename":"switch.ts","title":{"zh":"自定义开关节点","en":"Custom Switch Node"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*hC_CTIqqE5gAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"自定义节点","order":211},"en":{"title":"Custom Node","order":211}}},{"relativePath":"node/group/demo/collapsable.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/group/demo/collapsable.ts","order":5,"filename":"collapsable.ts","title":{"zh":"折叠/展开父节点","en":"Collapse/Expand the Parent Node"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*-HGVS6LIcEMAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Group","order":230},"zh":{"title":"群组","order":230}}},{"relativePath":"node/group/demo/embedding-by-dnd.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/group/demo/embedding-by-dnd.ts","order":2,"filename":"embedding-by-dnd.ts","title":{"zh":"拖入/拖出父节点","en":"Embedding by Drag and Drop"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*MhYYRZnohv4AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Group","order":230},"zh":{"title":"群组","order":230}}},{"relativePath":"node/group/demo/embedding-edges.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/group/demo/embedding-edges.ts","order":1,"filename":"embedding-edges.ts","title":{"zh":"自动更新边的父节点","en":"Auto Update Edge's Parent"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*5wMTSKjHCysAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Group","order":230},"zh":{"title":"群组","order":230}}},{"relativePath":"node/group/demo/embedding-nodes.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/group/demo/embedding-nodes.ts","order":0,"filename":"embedding-nodes.ts","title":{"zh":"嵌套节点","en":"Embedding Nodes"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*cUSYR4GD9TMAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Group","order":230},"zh":{"title":"群组","order":230}}},{"relativePath":"node/group/demo/expand-shrink.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/group/demo/expand-shrink.ts","order":4,"filename":"expand-shrink.ts","title":{"zh":"自动扩展/收缩父节点","en":"Auto Expand/Shrink the Parent Node"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*92fsRq_2YV0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Group","order":230},"zh":{"title":"群组","order":230}}},{"relativePath":"node/group/demo/restrict-movement.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/group/demo/restrict-movement.ts","order":3,"filename":"restrict-movement.ts","title":{"zh":"限制子节点的移动范围","en":"Restrict the Movement of Child Nodes"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*4YxDQ712eyEAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Group","order":230},"zh":{"title":"群组","order":230}}},{"relativePath":"node/native-node/demo/cylinder.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/native-node/demo/cylinder.ts","order":6,"filename":"cylinder.ts","title":{"zh":"Cylinder","en":"Cylinder"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*MkDMTaYuFAUAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"内置节点","order":210},"en":{"title":"Native Node","order":211}}},{"relativePath":"node/native-node/demo/circle.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/native-node/demo/circle.ts","order":2,"filename":"circle.ts","title":{"zh":"Circle","en":"Circle"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*tWKuQaqsaUgAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"内置节点","order":210},"en":{"title":"Native Node","order":211}}},{"relativePath":"node/native-node/demo/image.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/native-node/demo/image.ts","order":7,"filename":"image.ts","title":{"zh":"Image","en":"Image"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*tIReSJNChdkAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"内置节点","order":210},"en":{"title":"Native Node","order":211}}},{"relativePath":"node/native-node/demo/ellipse.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/native-node/demo/ellipse.ts","order":1,"filename":"ellipse.ts","title":{"zh":"Ellipse","en":"Ellipse"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*4d5lT5DQzgkAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"内置节点","order":210},"en":{"title":"Native Node","order":211}}},{"relativePath":"node/native-node/demo/path.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/native-node/demo/path.ts","order":3,"filename":"path.ts","title":{"zh":"Path","en":"Path"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*RebUQ5ze_PkAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"内置节点","order":210},"en":{"title":"Native Node","order":211}}},{"relativePath":"node/native-node/demo/polygon.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/native-node/demo/polygon.ts","order":4,"filename":"polygon.ts","title":{"zh":"Polygon","en":"Polygon"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*LZepTKoZtRkAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"内置节点","order":210},"en":{"title":"Native Node","order":211}}},{"relativePath":"node/native-node/demo/polyline.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/native-node/demo/polyline.ts","order":5,"filename":"polyline.ts","title":{"zh":"Polyline","en":"Polyline"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*t6wZQarashoAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"内置节点","order":210},"en":{"title":"Native Node","order":211}}},{"relativePath":"node/native-node/demo/rect.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/native-node/demo/rect.ts","order":0,"filename":"rect.ts","title":{"zh":"Rectangle","en":"Rectangle"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*vCTjSJ41rnIAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"内置节点","order":210},"en":{"title":"Native Node","order":211}}},{"relativePath":"node/native-node/demo/text-block.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/native-node/demo/text-block.ts","order":8,"filename":"text-block.ts","title":{"zh":"文本","en":"Text Block"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*3_yQTKv_lEsAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"内置节点","order":210},"en":{"title":"Native Node","order":211}}},{"relativePath":"node/port/demo/connect-to-port.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/port/demo/connect-to-port.ts","order":3,"filename":"connect-to-port.ts","title":{"zh":"连接到链接桩","en":"Connect to Port"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*6R08SbvgI6MAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"链接桩","order":220},"en":{"title":"Port","order":220}}},{"relativePath":"node/port/demo/default.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/port/demo/default.ts","order":0,"filename":"default.ts","title":{"zh":"默认链接桩","en":"Default Port"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*DYDDQLNARFYAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"链接桩","order":220},"en":{"title":"Port","order":220}}},{"relativePath":"node/port/demo/dynamic.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/port/demo/dynamic.ts","order":2,"filename":"dynamic.ts","title":{"zh":"添加或移除链接桩","en":"Add or Remove Port Dynamically"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*ABl7SrXZRQoAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"链接桩","order":220},"en":{"title":"Port","order":220}}},{"relativePath":"node/port/demo/group.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/port/demo/group.ts","order":1,"filename":"group.ts","title":{"zh":"使用 Group 定义链接桩样式","en":"Use Group to Custom Port Style"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*2xpxTbuyTngAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"链接桩","order":220},"en":{"title":"Port","order":220}}},{"relativePath":"node/port/demo/label.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/port/demo/label.ts","order":5,"filename":"label.ts","title":{"zh":"链接桩标签","en":"Label of Port"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*jxynTYy8bH8AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"链接桩","order":220},"en":{"title":"Port","order":220}}},{"relativePath":"node/port/demo/port-label-position-in-out.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/port/demo/port-label-position-in-out.ts","order":14,"filename":"port-label-position-in-out.ts","title":{"zh":"位于节点内部或外部的标签","en":"Place Label Inside/Outside of Node"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*H-KnRZhXNckAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"链接桩","order":220},"en":{"title":"Port","order":220}}},{"relativePath":"node/port/demo/port-label-position-side.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/port/demo/port-label-position-side.ts","order":13,"filename":"port-label-position-side.ts","title":{"zh":"位于链接桩一侧的标签","en":"Place Label On the Side of Port"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*XgvYSp7pggAAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"链接桩","order":220},"en":{"title":"Port","order":220}}},{"relativePath":"node/port/demo/port-label-position-radial.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/port/demo/port-label-position-radial.ts","order":15,"filename":"port-label-position-radial.ts","title":{"zh":"位于椭圆外围的标签","en":"Place Label Outside of Ellipse"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*M-u1R4Tdu7kAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"链接桩","order":220},"en":{"title":"Port","order":220}}},{"relativePath":"node/port/demo/port-position-absolute.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/port/demo/port-position-absolute.ts","order":6,"filename":"port-position-absolute.ts","title":{"zh":"绝对定位的链接桩","en":"Absolute Position of Ports"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*mQfCQZhthxsAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"链接桩","order":220},"en":{"title":"Port","order":220}}},{"relativePath":"node/port/demo/port-position-custom.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/port/demo/port-position-custom.ts","order":12,"filename":"port-position-custom.ts","title":{"zh":"自定义链接桩位置","en":"Custom the Position of Ports"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*8Cz3SKibsO4AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"链接桩","order":220},"en":{"title":"Port","order":220}}},{"relativePath":"node/port/demo/port-position-ellipse-compensation.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/port/demo/port-position-ellipse-compensation.ts","order":11,"filename":"port-position-ellipse-compensation.ts","title":{"zh":"沿圆弧自动旋转的链接桩","en":"Auto Rotate Ports Along the Arc"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*HKxoQ6kpw4oAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"链接桩","order":220},"en":{"title":"Port","order":220}}},{"relativePath":"node/port/demo/port-position-ellipse-spread.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/port/demo/port-position-ellipse-spread.ts","order":9,"filename":"port-position-ellipse-spread.ts","title":{"zh":"沿椭圆均匀分布的链接桩","en":"Uniform Distributed Ports Along the Ellipse"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*WV01TIKfPmkAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"链接桩","order":220},"en":{"title":"Port","order":220}}},{"relativePath":"node/port/demo/port-position-ellipse.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/port/demo/port-position-ellipse.ts","order":10,"filename":"port-position-ellipse.ts","title":{"zh":"沿椭圆分布的链接桩","en":"Ports Along the Ellipse"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*roBwQYYlJjMAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"链接桩","order":220},"en":{"title":"Port","order":220}}},{"relativePath":"node/port/demo/port-position-side.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/port/demo/port-position-side.ts","order":7,"filename":"port-position-side.ts","title":{"zh":"沿矩形边框均匀分布的链接桩","en":"Uniform Distributed Ports Along the Rectangle"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*iccNRLkBahEAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"链接桩","order":220},"en":{"title":"Port","order":220}}},{"relativePath":"node/port/demo/port-position-line.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/port/demo/port-position-line.ts","order":8,"filename":"port-position-line.ts","title":{"zh":"沿任意直线均匀分布的链接桩","en":"Uniform Distributed Ports Along the Line"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*-EXyT5PxgdcAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"链接桩","order":220},"en":{"title":"Port","order":220}}},{"relativePath":"node/port/demo/render-port-with-react.tsx","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/port/demo/render-port-with-react.tsx","order":4,"filename":"render-port-with-react.tsx","title":{"zh":"使用 React 渲染链接桩","en":"Render Port with React"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*XWjES4Hv1HcAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"链接桩","order":220},"en":{"title":"Port","order":220}}},{"relativePath":"node/tool/demo/boundary.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/tool/demo/boundary.ts","order":2,"filename":"boundary.ts","title":{"zh":"包围框","en":"Boundary Box"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*9jEGTak16UEAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Node Tools","order":300},"zh":{"title":"节点工具","order":300}}},{"relativePath":"node/tool/demo/button.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/tool/demo/button.ts","order":0,"filename":"button.ts","title":{"zh":"自定义按钮","en":"Custom Button"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*CrBoSbn-b84AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Node Tools","order":300},"zh":{"title":"节点工具","order":300}}},{"relativePath":"node/tool/demo/button-remove.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/node/tool/demo/button-remove.ts","order":1,"filename":"button-remove.ts","title":{"zh":"删除按钮","en":"Delete Button"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*EkLwQKIR81MAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Node Tools","order":300},"zh":{"title":"节点工具","order":300}}},{"relativePath":"showcase/faq/demo/flex-image.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/showcase/faq/demo/flex-image.ts","order":0,"filename":"flex-image.ts","title":{"zh":"根据图片大小缩放节点","en":"Resize Node According to the Image Size"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*AhNyQ5453mEAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"FAQ","order":120},"zh":{"title":"常见问题","order":120}}},{"relativePath":"showcase/practices/demo/algo-flow.tsx","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/showcase/practices/demo/algo-flow.tsx","order":0,"filename":"algo-flow.tsx","title":{"zh":"人工智能建模流程","en":"Flow for AI Model"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*3A0IR44lo60AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Practices","order":110},"zh":{"title":"业务实践","order":110}}},{"relativePath":"showcase/practices/demo/org.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/showcase/practices/demo/org.ts","order":3,"filename":"org.ts","title":{"zh":"组织架构图","en":"Organizational Charts"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*mxDSTpxbMYYAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Practices","order":110},"zh":{"title":"业务实践","order":110}}},{"relativePath":"showcase/practices/demo/orgchart.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/showcase/practices/demo/orgchart.ts","order":4,"filename":"orgchart.ts","title":{"zh":"组织架构图（自动布局）","en":"Organizational Charts"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*w5SUSIvTxPAAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Practices","order":110},"zh":{"title":"业务实践","order":110}}},{"relativePath":"showcase/practices/demo/tree.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/showcase/practices/demo/tree.ts","order":2,"filename":"tree.ts","title":{"zh":"展开/折叠树","en":"Expand/Collapse the Tree"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*dJiNTJ2h3GAAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Practices","order":110},"zh":{"title":"业务实践","order":110}}},{"relativePath":"showcase/practices/demo/validate-connection.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/showcase/practices/demo/validate-connection.ts","order":1,"filename":"validate-connection.ts","title":{"zh":"链接桩验证/高亮/自动吸附","en":"Validattion/Highlight/Absorb of Port"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*chF2SIucKCUAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Practices","order":110},"zh":{"title":"业务实践","order":110}}}],"exampleSections":{"examples":[{"relativePath":"showcase/practices/demo/algo-flow.tsx","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/showcase/practices/demo/algo-flow.tsx","order":0,"filename":"algo-flow.tsx","title":{"zh":"人工智能建模流程","en":"Flow for AI Model"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*3A0IR44lo60AAAAAAAAAAAAAARQnAQ","source":"import React from 'react'\nimport ReactDOM from 'react-dom'\nimport insertCss from 'insert-css'\nimport { Tooltip } from 'antd'\nimport { Graph, Node, Path, Dom } from '@antv/x6'\n\n// https://codesandbox.io/s/x6-pai-edge-nq3hl\n\n// 定义节点\nGraph.registerNode(\n  'algo-node',\n  {\n    inherit: 'rect',\n    attrs: {\n      body: {\n        strokeWidth: 1,\n        stroke: '#108ee9',\n        fill: '#fff',\n        rx: 15,\n        ry: 15,\n      },\n    },\n    portMarkup: [\n      {\n        tagName: 'foreignObject',\n        selector: 'fo',\n        attrs: {\n          width: 10,\n          height: 10,\n          x: -5,\n          y: -5,\n          magnet: 'true',\n        },\n        children: [\n          {\n            ns: Dom.ns.xhtml,\n            tagName: 'body',\n            selector: 'foBody',\n            attrs: {\n              xmlns: Dom.ns.xhtml,\n            },\n            style: {\n              width: '100%',\n              height: '100%',\n            },\n            children: [\n              {\n                tagName: 'div',\n                selector: 'content',\n                style: {\n                  width: '100%',\n                  height: '100%',\n                },\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  true,\n)\n\n// 定义边\nGraph.registerConnector(\n  'algo-edge',\n  (source, target) => {\n    const offset = 4\n    const control = 80\n    const v1 = { x: source.x, y: source.y + offset + control }\n    const v2 = { x: target.x, y: target.y - offset - control }\n\n    return `M ${source.x} ${source.y}\n       L ${source.x} ${source.y + offset}\n       C ${v1.x} ${v1.y} ${v2.x} ${v2.y} ${target.x} ${target.y - offset}\n       L ${target.x} ${target.y}\n      `\n  },\n  true,\n)\n\n// 初始化画布\nconst graph = new Graph({\n  grid: true,\n  container: document.getElementById('container'),\n  onPortRendered(args) {\n    // console.log(args)\n    const port = args.port\n    const contentSelectors = args.contentSelectors\n    const container = contentSelectors && contentSelectors.content\n    if (container) {\n      ReactDOM.render(\n        <Tooltip title=\"port\">\n          <div className={`my-port${port.connected ? ' connected' : ''}`} />\n        </Tooltip>,\n        container,\n      )\n    }\n  },\n  highlighting: {\n    nodeAvailable: {\n      name: 'className',\n      args: {\n        className: 'available',\n      },\n    },\n    magnetAvailable: {\n      name: 'className',\n      args: {\n        className: 'available',\n      },\n    },\n    magnetAdsorbed: {\n      name: 'className',\n      args: {\n        className: 'adsorbed',\n      },\n    },\n  },\n  connecting: {\n    snap: true,\n    allowBlank: false,\n    allowLoop: false,\n    highlight: true,\n    sourceAnchor: 'bottom',\n    targetAnchor: 'center',\n    connectionPoint: 'anchor',\n    connector: 'algo-edge',\n    createEdge() {\n      return graph.createEdge({\n        attrs: {\n          line: {\n            strokeDasharray: '5 5',\n            stroke: '#808080',\n            strokeWidth: 1,\n            targetMarker: {\n              name: 'block',\n              args: {\n                size: '6',\n              },\n            },\n          },\n        },\n      })\n    },\n    validateMagnet({ magnet }) {\n      return magnet.getAttribute('port-group') !== 'in'\n    },\n    validateConnection({ sourceView, targetView, sourceMagnet, targetMagnet }) {\n      // 只能从输出链接桩创建连接\n      if (!sourceMagnet || sourceMagnet.getAttribute('port-group') === 'in') {\n        return false\n      }\n\n      // 只能连接到输入链接桩\n      if (!targetMagnet || targetMagnet.getAttribute('port-group') !== 'in') {\n        return false\n      }\n\n      // 判断目标链接桩是否可连接\n      const portId = targetMagnet.getAttribute('port')!\n      const node = targetView.cell as Node\n      const port = node.getPort(portId)\n      if (port && port.connected) {\n        return false\n      }\n\n      return true\n    },\n  },\n})\n\ngraph.on('edge:connected', (args) => {\n  const edge = args.edge\n  const node = args.currentCell as Node\n  const elem = args.currentMagnet as HTMLElement\n  const portId = elem.getAttribute('port') as string\n\n  // 触发 port 重新渲染\n  node.setPortProp(portId, 'connected', true)\n\n  // 更新连线样式\n  edge.attr({\n    line: {\n      strokeDasharray: '',\n      targetMarker: '',\n    },\n  })\n})\n\ngraph.addNode({\n  x: 380,\n  y: 180,\n  width: 160,\n  height: 30,\n  shape: 'algo-node',\n  label: '归一化',\n  ports: {\n    items: [\n      { group: 'in', id: 'in1' },\n      { group: 'in', id: 'in2' },\n      { group: 'out', id: 'out1' },\n      { group: 'out', id: 'out2' },\n    ],\n    groups: {\n      in: {\n        position: { name: 'top' },\n        zIndex: 1,\n      },\n      out: {\n        position: { name: 'bottom' },\n        zIndex: 1,\n      },\n    },\n  },\n})\n\nconst source = graph.addNode({\n  x: 200,\n  y: 50,\n  width: 160,\n  height: 30,\n  shape: 'algo-node',\n  label: 'SQL',\n  ports: {\n    items: [\n      { group: 'in', id: 'in1' },\n      { group: 'in', id: 'in2' },\n      { group: 'out', id: 'out1' },\n    ],\n    groups: {\n      in: {\n        position: { name: 'top' },\n        zIndex: 1,\n      },\n      out: {\n        position: { name: 'bottom' },\n        zIndex: 1,\n      },\n    },\n  },\n})\n\nconst target = graph.addNode({\n  x: 120,\n  y: 260,\n  width: 160,\n  height: 30,\n  shape: 'algo-node',\n  label: '序列化',\n  ports: {\n    items: [\n      { group: 'in', id: 'in1', connected: true },\n      { group: 'in', id: 'in2' },\n      { group: 'out', id: 'out1' },\n    ],\n    groups: {\n      in: {\n        position: { name: 'top' },\n        zIndex: 1,\n      },\n      out: {\n        position: { name: 'bottom' },\n        zIndex: 1,\n      },\n    },\n  },\n})\n\ngraph.addEdge({\n  source: { cell: source, port: 'out1' },\n  target: { cell: target, port: 'in1' },\n  attrs: {\n    line: {\n      stroke: '#808080',\n      strokeWidth: 1,\n      targetMarker: '',\n    },\n  },\n})\n\n// 引入样式\ninsertCss(`\n.x6-node [magnet=\"true\"] {\n  cursor: crosshair;\n  transition: none;\n}\n\n.x6-node [magnet=\"true\"]:hover {\n  opacity: 1;\n}\n\n.x6-node [magnet=\"true\"][port-group=\"in\"] {\n  cursor: move;\n}\n\n.my-port {\n  width: 100%;\n  height: 100%;\n  border: 1px solid #808080;\n  border-radius: 100%;\n  background: #eee;\n}\n\n.my-port.connected {\n  width: 0;\n  height: 0;\n  margin-top: 5px;\n  margin-left: 1px;\n  border-width: 5px 4px 0;\n  border-style: solid;\n  border-color: #808080 transparent transparent;\n  border-radius: 0;\n  background-color: transparent;\n}\n\n.x6-port-body.available {\n  overflow: visible;\n}\n\n.x6-port-body.available body {\n  overflow: visible;\n}\n\n.x6-port-body.available body > div::before {\n  content: \" \";\n  float: left;\n  width: 20px;\n  height: 20px;\n  margin-top: -5px;\n  margin-left: -5px;\n  border-radius: 50%;\n  background-color: rgba(57, 202, 116, 0.6);\n  box-sizing: border-box;\n}\n\n.x6-port-body.available body > div::after {\n  content: \" \";\n  float: left;\n  clear: both;\n  width: 10px;\n  height: 10px;\n  margin-top: -15px;\n  border-radius: 50%;\n  background-color: #fff;\n  border: 1px solid #39ca74;\n  position: relative;\n  z-index: 10;\n  box-sizing: border-box;\n}\n\n.x6-port-body.adsorbed {\n  overflow: visible;\n}\n\n.x6-port-body.adsorbed body {\n  overflow: visible;\n}\n\n.x6-port-body.adsorbed body > div::before {\n  content: \" \";\n  float: left;\n  width: 28px;\n  height: 28px;\n  margin-top: -9px;\n  margin-left: -9px;\n  border-radius: 50%;\n  background-color: rgba(57, 202, 116, 0.6);\n  box-sizing: border-box;\n}\n\n.x6-port-body.adsorbed body > div::after {\n  content: \" \";\n  float: left;\n  clear: both;\n  width: 10px;\n  height: 10px;\n  margin-top: -19px;\n  border-radius: 50%;\n  background-color: #fff;\n  border: 1px solid #39ca74;\n  position: relative;\n  z-index: 10;\n  box-sizing: border-box;\n}\n`)\n","babeledSource":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"react\", \"react-dom\", \"insert-css\", \"antd\", \"@antv/x6\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"react\"), require(\"react-dom\"), require(\"insert-css\"), require(\"antd\"), require(\"@antv/x6\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.react, global.reactDom, global.insertCss, global.antd, global.x6);\n    global.algoFlow = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_react, _reactDom, _insertCss, _antd, _x) {\n  \"use strict\";\n\n  _react = _interopRequireDefault(_react);\n  _reactDom = _interopRequireDefault(_reactDom);\n  _insertCss = _interopRequireDefault(_insertCss);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  // https://codesandbox.io/s/x6-pai-edge-nq3hl\n  // 定义节点\n  _x.Graph.registerNode('algo-node', {\n    inherit: 'rect',\n    attrs: {\n      body: {\n        strokeWidth: 1,\n        stroke: '#108ee9',\n        fill: '#fff',\n        rx: 15,\n        ry: 15\n      }\n    },\n    portMarkup: [{\n      tagName: 'foreignObject',\n      selector: 'fo',\n      attrs: {\n        width: 10,\n        height: 10,\n        x: -5,\n        y: -5,\n        magnet: 'true'\n      },\n      children: [{\n        ns: _x.Dom.ns.xhtml,\n        tagName: 'body',\n        selector: 'foBody',\n        attrs: {\n          xmlns: _x.Dom.ns.xhtml\n        },\n        style: {\n          width: '100%',\n          height: '100%'\n        },\n        children: [{\n          tagName: 'div',\n          selector: 'content',\n          style: {\n            width: '100%',\n            height: '100%'\n          }\n        }]\n      }]\n    }]\n  }, true); // 定义边\n\n\n  _x.Graph.registerConnector('algo-edge', function (source, target) {\n    var offset = 4;\n    var control = 80;\n    var v1 = {\n      x: source.x,\n      y: source.y + offset + control\n    };\n    var v2 = {\n      x: target.x,\n      y: target.y - offset - control\n    };\n    return \"M \".concat(source.x, \" \").concat(source.y, \"\\n       L \").concat(source.x, \" \").concat(source.y + offset, \"\\n       C \").concat(v1.x, \" \").concat(v1.y, \" \").concat(v2.x, \" \").concat(v2.y, \" \").concat(target.x, \" \").concat(target.y - offset, \"\\n       L \").concat(target.x, \" \").concat(target.y, \"\\n      \");\n  }, true); // 初始化画布\n\n\n  var graph = new _x.Graph({\n    grid: true,\n    container: document.getElementById('container'),\n    onPortRendered: function onPortRendered(args) {\n      // console.log(args)\n      var port = args.port;\n      var contentSelectors = args.contentSelectors;\n      var container = contentSelectors && contentSelectors.content;\n\n      if (container) {\n        _reactDom.default.render( /*#__PURE__*/_react.default.createElement(_antd.Tooltip, {\n          title: \"port\"\n        }, /*#__PURE__*/_react.default.createElement(\"div\", {\n          className: \"my-port\".concat(port.connected ? ' connected' : '')\n        })), container);\n      }\n    },\n    highlighting: {\n      nodeAvailable: {\n        name: 'className',\n        args: {\n          className: 'available'\n        }\n      },\n      magnetAvailable: {\n        name: 'className',\n        args: {\n          className: 'available'\n        }\n      },\n      magnetAdsorbed: {\n        name: 'className',\n        args: {\n          className: 'adsorbed'\n        }\n      }\n    },\n    connecting: {\n      snap: true,\n      allowBlank: false,\n      allowLoop: false,\n      highlight: true,\n      sourceAnchor: 'bottom',\n      targetAnchor: 'center',\n      connectionPoint: 'anchor',\n      connector: 'algo-edge',\n      createEdge: function createEdge() {\n        return graph.createEdge({\n          attrs: {\n            line: {\n              strokeDasharray: '5 5',\n              stroke: '#808080',\n              strokeWidth: 1,\n              targetMarker: {\n                name: 'block',\n                args: {\n                  size: '6'\n                }\n              }\n            }\n          }\n        });\n      },\n      validateMagnet: function validateMagnet(_ref) {\n        var magnet = _ref.magnet;\n        return magnet.getAttribute('port-group') !== 'in';\n      },\n      validateConnection: function validateConnection(_ref2) {\n        var sourceView = _ref2.sourceView,\n            targetView = _ref2.targetView,\n            sourceMagnet = _ref2.sourceMagnet,\n            targetMagnet = _ref2.targetMagnet;\n\n        // 只能从输出链接桩创建连接\n        if (!sourceMagnet || sourceMagnet.getAttribute('port-group') === 'in') {\n          return false;\n        } // 只能连接到输入链接桩\n\n\n        if (!targetMagnet || targetMagnet.getAttribute('port-group') !== 'in') {\n          return false;\n        } // 判断目标链接桩是否可连接\n\n\n        var portId = targetMagnet.getAttribute('port');\n        var node = targetView.cell;\n        var port = node.getPort(portId);\n\n        if (port && port.connected) {\n          return false;\n        }\n\n        return true;\n      }\n    }\n  });\n  graph.on('edge:connected', function (args) {\n    var edge = args.edge;\n    var node = args.currentCell;\n    var elem = args.currentMagnet;\n    var portId = elem.getAttribute('port'); // 触发 port 重新渲染\n\n    node.setPortProp(portId, 'connected', true); // 更新连线样式\n\n    edge.attr({\n      line: {\n        strokeDasharray: '',\n        targetMarker: ''\n      }\n    });\n  });\n  graph.addNode({\n    x: 380,\n    y: 180,\n    width: 160,\n    height: 30,\n    shape: 'algo-node',\n    label: '归一化',\n    ports: {\n      items: [{\n        group: 'in',\n        id: 'in1'\n      }, {\n        group: 'in',\n        id: 'in2'\n      }, {\n        group: 'out',\n        id: 'out1'\n      }, {\n        group: 'out',\n        id: 'out2'\n      }],\n      groups: {\n        in: {\n          position: {\n            name: 'top'\n          },\n          zIndex: 1\n        },\n        out: {\n          position: {\n            name: 'bottom'\n          },\n          zIndex: 1\n        }\n      }\n    }\n  });\n  var source = graph.addNode({\n    x: 200,\n    y: 50,\n    width: 160,\n    height: 30,\n    shape: 'algo-node',\n    label: 'SQL',\n    ports: {\n      items: [{\n        group: 'in',\n        id: 'in1'\n      }, {\n        group: 'in',\n        id: 'in2'\n      }, {\n        group: 'out',\n        id: 'out1'\n      }],\n      groups: {\n        in: {\n          position: {\n            name: 'top'\n          },\n          zIndex: 1\n        },\n        out: {\n          position: {\n            name: 'bottom'\n          },\n          zIndex: 1\n        }\n      }\n    }\n  });\n  var target = graph.addNode({\n    x: 120,\n    y: 260,\n    width: 160,\n    height: 30,\n    shape: 'algo-node',\n    label: '序列化',\n    ports: {\n      items: [{\n        group: 'in',\n        id: 'in1',\n        connected: true\n      }, {\n        group: 'in',\n        id: 'in2'\n      }, {\n        group: 'out',\n        id: 'out1'\n      }],\n      groups: {\n        in: {\n          position: {\n            name: 'top'\n          },\n          zIndex: 1\n        },\n        out: {\n          position: {\n            name: 'bottom'\n          },\n          zIndex: 1\n        }\n      }\n    }\n  });\n  graph.addEdge({\n    source: {\n      cell: source,\n      port: 'out1'\n    },\n    target: {\n      cell: target,\n      port: 'in1'\n    },\n    attrs: {\n      line: {\n        stroke: '#808080',\n        strokeWidth: 1,\n        targetMarker: ''\n      }\n    }\n  }); // 引入样式\n\n  (0, _insertCss.default)(\"\\n.x6-node [magnet=\\\"true\\\"] {\\n  cursor: crosshair;\\n  transition: none;\\n}\\n\\n.x6-node [magnet=\\\"true\\\"]:hover {\\n  opacity: 1;\\n}\\n\\n.x6-node [magnet=\\\"true\\\"][port-group=\\\"in\\\"] {\\n  cursor: move;\\n}\\n\\n.my-port {\\n  width: 100%;\\n  height: 100%;\\n  border: 1px solid #808080;\\n  border-radius: 100%;\\n  background: #eee;\\n}\\n\\n.my-port.connected {\\n  width: 0;\\n  height: 0;\\n  margin-top: 5px;\\n  margin-left: 1px;\\n  border-width: 5px 4px 0;\\n  border-style: solid;\\n  border-color: #808080 transparent transparent;\\n  border-radius: 0;\\n  background-color: transparent;\\n}\\n\\n.x6-port-body.available {\\n  overflow: visible;\\n}\\n\\n.x6-port-body.available body {\\n  overflow: visible;\\n}\\n\\n.x6-port-body.available body > div::before {\\n  content: \\\" \\\";\\n  float: left;\\n  width: 20px;\\n  height: 20px;\\n  margin-top: -5px;\\n  margin-left: -5px;\\n  border-radius: 50%;\\n  background-color: rgba(57, 202, 116, 0.6);\\n  box-sizing: border-box;\\n}\\n\\n.x6-port-body.available body > div::after {\\n  content: \\\" \\\";\\n  float: left;\\n  clear: both;\\n  width: 10px;\\n  height: 10px;\\n  margin-top: -15px;\\n  border-radius: 50%;\\n  background-color: #fff;\\n  border: 1px solid #39ca74;\\n  position: relative;\\n  z-index: 10;\\n  box-sizing: border-box;\\n}\\n\\n.x6-port-body.adsorbed {\\n  overflow: visible;\\n}\\n\\n.x6-port-body.adsorbed body {\\n  overflow: visible;\\n}\\n\\n.x6-port-body.adsorbed body > div::before {\\n  content: \\\" \\\";\\n  float: left;\\n  width: 28px;\\n  height: 28px;\\n  margin-top: -9px;\\n  margin-left: -9px;\\n  border-radius: 50%;\\n  background-color: rgba(57, 202, 116, 0.6);\\n  box-sizing: border-box;\\n}\\n\\n.x6-port-body.adsorbed body > div::after {\\n  content: \\\" \\\";\\n  float: left;\\n  clear: both;\\n  width: 10px;\\n  height: 10px;\\n  margin-top: -19px;\\n  border-radius: 50%;\\n  background-color: #fff;\\n  border: 1px solid #39ca74;\\n  position: relative;\\n  z-index: 10;\\n  box-sizing: border-box;\\n}\\n\");\n});"},{"relativePath":"showcase/practices/demo/validate-connection.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/showcase/practices/demo/validate-connection.ts","order":1,"filename":"validate-connection.ts","title":{"zh":"链接桩验证/高亮/自动吸附","en":"Validattion/Highlight/Absorb of Port"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*chF2SIucKCUAAAAAAAAAAAAAARQnAQ","source":"import { Graph, Edge, Shape, NodeView } from '@antv/x6'\n\n// 定义节点\nclass MyShape extends Shape.Rect {\n  getInPorts() {\n    return this.getPortsByGroup('in')\n  }\n\n  getOutPorts() {\n    return this.getPortsByGroup('out')\n  }\n\n  getUsedInPorts(graph: Graph) {\n    const incomingEdges = graph.getIncomingEdges(this) || []\n    return incomingEdges.map((edge: Edge) => {\n      const portId = edge.getTargetPortId()\n      return this.getPort(portId!)\n    })\n  }\n\n  getNewInPorts(length: number) {\n    return Array.from(\n      {\n        length,\n      },\n      () => {\n        return {\n          group: 'in',\n        }\n      },\n    )\n  }\n\n  updateInPorts(graph: Graph) {\n    const minNumberOfPorts = 2\n    const ports = this.getInPorts()\n    const usedPorts = this.getUsedInPorts(graph)\n    const newPorts = this.getNewInPorts(\n      Math.max(minNumberOfPorts - usedPorts.length, 1),\n    )\n\n    if (\n      ports.length === minNumberOfPorts &&\n      ports.length - usedPorts.length > 0\n    ) {\n      // noop\n    } else if (ports.length === usedPorts.length) {\n      this.addPorts(newPorts)\n    } else if (ports.length + 1 > usedPorts.length) {\n      this.prop(\n        ['ports', 'items'],\n        this.getOutPorts().concat(usedPorts).concat(newPorts),\n        {\n          rewrite: true,\n        },\n      )\n    }\n\n    return this\n  }\n}\n\nMyShape.config({\n  attrs: {\n    root: {\n      magnet: false,\n    },\n    body: {\n      fill: '#f5f5f5',\n      stroke: '#d9d9d9',\n      strokeWidth: 1,\n    },\n  },\n  ports: {\n    items: [\n      {\n        group: 'out',\n      },\n    ],\n    groups: {\n      in: {\n        position: {\n          name: 'top',\n        },\n        attrs: {\n          portBody: {\n            magnet: 'passive',\n            r: 6,\n            stroke: '#ffa940',\n            fill: '#fff',\n            strokeWidth: 2,\n          },\n        },\n      },\n      out: {\n        position: {\n          name: 'bottom',\n        },\n        attrs: {\n          portBody: {\n            magnet: true,\n            r: 6,\n            fill: '#fff',\n            stroke: '#3199FF',\n            strokeWidth: 2,\n          },\n        },\n      },\n    },\n  },\n  portMarkup: [\n    {\n      tagName: 'circle',\n      selector: 'portBody',\n    },\n  ],\n})\n\n// 高亮\nconst magnetAvailabilityHighlighter = {\n  name: 'stroke',\n  args: {\n    attrs: {\n      fill: '#fff',\n      stroke: '#47C769',\n    },\n  },\n}\n\n// 画布\nconst graph = new Graph({\n  grid: true,\n  container: document.getElementById('container')!,\n  highlighting: {\n    magnetAvailable: magnetAvailabilityHighlighter,\n    magnetAdsorbed: {\n      name: 'stroke',\n      args: {\n        attrs: {\n          fill: '#fff',\n          stroke: '#31d0c6',\n        },\n      },\n    },\n  },\n  connecting: {\n    snap: true,\n    allowBlank: false,\n    allowLoop: false,\n    highlight: true,\n    connector: 'rounded',\n    connectionPoint: 'boundary',\n    router: {\n      name: 'er',\n      args: {\n        direction: 'V',\n      },\n    },\n    createEdge() {\n      return new Shape.Edge({\n        attrs: {\n          line: {\n            stroke: '#a0a0a0',\n            strokeWidth: 1,\n            targetMarker: {\n              name: 'classic',\n              size: 7,\n            },\n          },\n        },\n      })\n    },\n    validateConnection({ sourceView, targetView, targetMagnet }) {\n      if (!targetMagnet) {\n        return false\n      }\n\n      if (targetMagnet.getAttribute('port-group') !== 'in') {\n        return false\n      }\n\n      if (targetView) {\n        const node = targetView.cell\n        if (node instanceof MyShape) {\n          const portId = targetMagnet.getAttribute('port')\n          const usedInPorts = node.getUsedInPorts(graph)\n          if (usedInPorts.find((port) => port && port.id === portId)) {\n            return false\n          }\n        }\n      }\n\n      return true\n    },\n  },\n})\n\ngraph.addNode(\n  new MyShape().resize(120, 40).position(200, 50).updateInPorts(graph),\n)\n\ngraph.addNode(\n  new MyShape().resize(120, 40).position(400, 50).updateInPorts(graph),\n)\n\ngraph.addNode(\n  new MyShape().resize(120, 40).position(300, 250).updateInPorts(graph),\n)\n\nfunction update(view: NodeView) {\n  const cell = view.cell\n  if (cell instanceof MyShape) {\n    cell.getInPorts().forEach((port) => {\n      const portNode = view.findPortElem(port.id!, 'portBody')\n      view.unhighlight(portNode, {\n        highlighter: magnetAvailabilityHighlighter,\n      })\n    })\n    cell.updateInPorts(graph)\n  }\n}\n\ngraph.on('edge:connected', ({ previousView, currentView }) => {\n  if (previousView) {\n    update(previousView as NodeView)\n  }\n  if (currentView) {\n    update(currentView as NodeView)\n  }\n})\n\ngraph.on('edge:removed', ({ edge, options }) => {\n  if (!options.ui) {\n    return\n  }\n\n  const target = edge.getTargetCell()\n  if (target instanceof MyShape) {\n    target.updateInPorts(graph)\n  }\n})\n\ngraph.on('edge:mouseenter', ({ edge }) => {\n  edge.addTools([\n    'source-arrowhead',\n    'target-arrowhead',\n    {\n      name: 'button-remove',\n      args: {\n        distance: -30,\n      },\n    },\n  ])\n})\n\ngraph.on('edge:mouseleave', ({ edge }) => {\n  edge.removeTools()\n})\n","babeledSource":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/x6\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/x6\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.x6);\n    global.validateConnection = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_x) {\n  \"use strict\";\n\n  function _instanceof(left, right) { if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) { return !!right[Symbol.hasInstance](left); } else { return left instanceof right; } }\n\n  function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n  function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\n  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\n  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n  function _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n  // 定义节点\n  var MyShape = /*#__PURE__*/function (_Shape$Rect) {\n    _inherits(MyShape, _Shape$Rect);\n\n    var _super = _createSuper(MyShape);\n\n    function MyShape() {\n      _classCallCheck(this, MyShape);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(MyShape, [{\n      key: \"getInPorts\",\n      value: function getInPorts() {\n        return this.getPortsByGroup('in');\n      }\n    }, {\n      key: \"getOutPorts\",\n      value: function getOutPorts() {\n        return this.getPortsByGroup('out');\n      }\n    }, {\n      key: \"getUsedInPorts\",\n      value: function getUsedInPorts(graph) {\n        var _this = this;\n\n        var incomingEdges = graph.getIncomingEdges(this) || [];\n        return incomingEdges.map(function (edge) {\n          var portId = edge.getTargetPortId();\n          return _this.getPort(portId);\n        });\n      }\n    }, {\n      key: \"getNewInPorts\",\n      value: function getNewInPorts(length) {\n        return Array.from({\n          length: length\n        }, function () {\n          return {\n            group: 'in'\n          };\n        });\n      }\n    }, {\n      key: \"updateInPorts\",\n      value: function updateInPorts(graph) {\n        var minNumberOfPorts = 2;\n        var ports = this.getInPorts();\n        var usedPorts = this.getUsedInPorts(graph);\n        var newPorts = this.getNewInPorts(Math.max(minNumberOfPorts - usedPorts.length, 1));\n\n        if (ports.length === minNumberOfPorts && ports.length - usedPorts.length > 0) {// noop\n        } else if (ports.length === usedPorts.length) {\n          this.addPorts(newPorts);\n        } else if (ports.length + 1 > usedPorts.length) {\n          this.prop(['ports', 'items'], this.getOutPorts().concat(usedPorts).concat(newPorts), {\n            rewrite: true\n          });\n        }\n\n        return this;\n      }\n    }]);\n\n    return MyShape;\n  }(_x.Shape.Rect);\n\n  MyShape.config({\n    attrs: {\n      root: {\n        magnet: false\n      },\n      body: {\n        fill: '#f5f5f5',\n        stroke: '#d9d9d9',\n        strokeWidth: 1\n      }\n    },\n    ports: {\n      items: [{\n        group: 'out'\n      }],\n      groups: {\n        in: {\n          position: {\n            name: 'top'\n          },\n          attrs: {\n            portBody: {\n              magnet: 'passive',\n              r: 6,\n              stroke: '#ffa940',\n              fill: '#fff',\n              strokeWidth: 2\n            }\n          }\n        },\n        out: {\n          position: {\n            name: 'bottom'\n          },\n          attrs: {\n            portBody: {\n              magnet: true,\n              r: 6,\n              fill: '#fff',\n              stroke: '#3199FF',\n              strokeWidth: 2\n            }\n          }\n        }\n      }\n    },\n    portMarkup: [{\n      tagName: 'circle',\n      selector: 'portBody'\n    }]\n  }); // 高亮\n\n  var magnetAvailabilityHighlighter = {\n    name: 'stroke',\n    args: {\n      attrs: {\n        fill: '#fff',\n        stroke: '#47C769'\n      }\n    }\n  }; // 画布\n\n  var graph = new _x.Graph({\n    grid: true,\n    container: document.getElementById('container'),\n    highlighting: {\n      magnetAvailable: magnetAvailabilityHighlighter,\n      magnetAdsorbed: {\n        name: 'stroke',\n        args: {\n          attrs: {\n            fill: '#fff',\n            stroke: '#31d0c6'\n          }\n        }\n      }\n    },\n    connecting: {\n      snap: true,\n      allowBlank: false,\n      allowLoop: false,\n      highlight: true,\n      connector: 'rounded',\n      connectionPoint: 'boundary',\n      router: {\n        name: 'er',\n        args: {\n          direction: 'V'\n        }\n      },\n      createEdge: function createEdge() {\n        return new _x.Shape.Edge({\n          attrs: {\n            line: {\n              stroke: '#a0a0a0',\n              strokeWidth: 1,\n              targetMarker: {\n                name: 'classic',\n                size: 7\n              }\n            }\n          }\n        });\n      },\n      validateConnection: function validateConnection(_ref) {\n        var sourceView = _ref.sourceView,\n            targetView = _ref.targetView,\n            targetMagnet = _ref.targetMagnet;\n\n        if (!targetMagnet) {\n          return false;\n        }\n\n        if (targetMagnet.getAttribute('port-group') !== 'in') {\n          return false;\n        }\n\n        if (targetView) {\n          var node = targetView.cell;\n\n          if (_instanceof(node, MyShape)) {\n            var portId = targetMagnet.getAttribute('port');\n            var usedInPorts = node.getUsedInPorts(graph);\n\n            if (usedInPorts.find(function (port) {\n              return port && port.id === portId;\n            })) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      }\n    }\n  });\n  graph.addNode(new MyShape().resize(120, 40).position(200, 50).updateInPorts(graph));\n  graph.addNode(new MyShape().resize(120, 40).position(400, 50).updateInPorts(graph));\n  graph.addNode(new MyShape().resize(120, 40).position(300, 250).updateInPorts(graph));\n\n  function update(view) {\n    var cell = view.cell;\n\n    if (_instanceof(cell, MyShape)) {\n      cell.getInPorts().forEach(function (port) {\n        var portNode = view.findPortElem(port.id, 'portBody');\n        view.unhighlight(portNode, {\n          highlighter: magnetAvailabilityHighlighter\n        });\n      });\n      cell.updateInPorts(graph);\n    }\n  }\n\n  graph.on('edge:connected', function (_ref2) {\n    var previousView = _ref2.previousView,\n        currentView = _ref2.currentView;\n\n    if (previousView) {\n      update(previousView);\n    }\n\n    if (currentView) {\n      update(currentView);\n    }\n  });\n  graph.on('edge:removed', function (_ref3) {\n    var edge = _ref3.edge,\n        options = _ref3.options;\n\n    if (!options.ui) {\n      return;\n    }\n\n    var target = edge.getTargetCell();\n\n    if (_instanceof(target, MyShape)) {\n      target.updateInPorts(graph);\n    }\n  });\n  graph.on('edge:mouseenter', function (_ref4) {\n    var edge = _ref4.edge;\n    edge.addTools(['source-arrowhead', 'target-arrowhead', {\n      name: 'button-remove',\n      args: {\n        distance: -30\n      }\n    }]);\n  });\n  graph.on('edge:mouseleave', function (_ref5) {\n    var edge = _ref5.edge;\n    edge.removeTools();\n  });\n});"},{"relativePath":"showcase/practices/demo/tree.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/showcase/practices/demo/tree.ts","order":2,"filename":"tree.ts","title":{"zh":"展开/折叠树","en":"Expand/Collapse the Tree"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*dJiNTJ2h3GAAAAAAAAAAAAAAARQnAQ","source":"import { Graph, Node, Edge, Shape } from '@antv/x6'\n\n// 定义节点\nclass TreeNode extends Node {\n  private collapsed: boolean = false\n\n  protected postprocess() {\n    this.toggleCollapse(false)\n  }\n\n  isCollapsed() {\n    return this.collapsed\n  }\n\n  toggleButtonVisibility(visible: boolean) {\n    this.attr('buttonGroup', {\n      display: visible ? 'block' : 'none',\n    })\n  }\n\n  toggleCollapse(collapsed?: boolean) {\n    const target = collapsed == null ? !this.collapsed : collapsed\n    if (!target) {\n      this.attr('buttonSign', {\n        d: 'M 1 5 9 5 M 5 1 5 9',\n        strokeWidth: 1.6,\n      })\n    } else {\n      this.attr('buttonSign', {\n        d: 'M 2 5 8 5',\n        strokeWidth: 1.8,\n      })\n    }\n    this.collapsed = target\n  }\n}\n\nTreeNode.config({\n  zIndex: 2,\n  markup: [\n    {\n      tagName: 'g',\n      selector: 'buttonGroup',\n      children: [\n        {\n          tagName: 'rect',\n          selector: 'button',\n          attrs: {\n            'pointer-events': 'visiblePainted',\n          },\n        },\n        {\n          tagName: 'path',\n          selector: 'buttonSign',\n          attrs: {\n            fill: 'none',\n            'pointer-events': 'none',\n          },\n        },\n      ],\n    },\n    {\n      tagName: 'rect',\n      selector: 'body',\n    },\n    {\n      tagName: 'text',\n      selector: 'label',\n    },\n  ],\n  attrs: {\n    body: {\n      refWidth: '100%',\n      refHeight: '100%',\n      strokeWidth: 1,\n      fill: '#ffffff',\n      stroke: '#a0a0a0',\n    },\n    label: {\n      textWrap: {\n        ellipsis: true,\n        width: -10,\n      },\n      textAnchor: 'middle',\n      textVerticalAnchor: 'middle',\n      refX: '50%',\n      refY: '50%',\n      fontSize: 12,\n    },\n    buttonGroup: {\n      refX: '100%',\n      refY: '50%',\n    },\n    button: {\n      fill: '#4C65DD',\n      stroke: 'none',\n      x: -10,\n      y: -10,\n      height: 20,\n      width: 30,\n      rx: 10,\n      ry: 10,\n      cursor: 'pointer',\n      event: 'node:collapse',\n    },\n    buttonSign: {\n      refX: 5,\n      refY: -5,\n      stroke: '#FFFFFF',\n      strokeWidth: 1.6,\n    },\n  },\n})\n\n// 定义边\nclass TreeEdge extends Shape.Edge {\n  isHidden() {\n    const node = this.getTargetNode() as TreeNode\n    return !node || !node.isVisible()\n  }\n}\n\nTreeEdge.config({\n  zIndex: 1,\n  attrs: {\n    line: {\n      stroke: '#a0a0a0',\n      strokeWidth: 1,\n      targetMarker: null,\n    },\n  },\n})\n\n// 注册\nNode.registry.register('tree-node', TreeNode as typeof Node, true)\nEdge.registry.register('tree-edge', TreeEdge as typeof Edge, true)\n\n// 初始化画布\nconst graph = new Graph({\n  container: document.getElementById('container')!,\n  grid: 1,\n  async: true,\n  frozen: true,\n  scroller: true,\n  interacting: false,\n  background: {\n    color: '#f5f5f5',\n  },\n  connecting: {\n    anchor: 'orth',\n    connector: 'rounded',\n    connectionPoint: 'boundary',\n    router: {\n      name: 'er',\n      args: {\n        offset: 24,\n        direction: 'H',\n      },\n    },\n  },\n})\n\ngraph.on('node:collapse', ({ node }: { node: TreeNode }) => {\n  node.toggleCollapse()\n  const collapsed = node.isCollapsed()\n  const run = (pre: TreeNode) => {\n    const succ = graph.getSuccessors(pre, { distance: 1 })\n    if (succ) {\n      succ.forEach((node: TreeNode) => {\n        node.toggleVisible(!collapsed)\n        if (!node.isCollapsed()) {\n          run(node)\n        }\n      })\n    }\n  }\n  run(node)\n})\n\nfetch('../data/mindmap.json')\n  .then((response) => response.json())\n  .then((data) => {\n    const start = new Date().getTime()\n    const nodes = data.nodes.map(({ leaf, ...metadata }: any) => {\n      const node = new TreeNode(metadata)\n      if (leaf) {\n        node.toggleButtonVisibility(leaf === false)\n      }\n      return node\n    })\n    const edges = data.edges.map(\n      (edge: any) =>\n        new TreeEdge({\n          source: edge.source,\n          target: edge.target,\n        }),\n    )\n\n    graph.resetCells([...nodes, ...edges])\n\n    graph.unfreeze({\n      progress({ done }) {\n        if (done) {\n          const time = new Date().getTime() - start\n          console.log(time)\n          graph.unfreeze({\n            batchSize: 50,\n          })\n          graph.zoomToFit({ padding: 24 })\n        }\n      },\n    })\n  })\n","babeledSource":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/x6\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/x6\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.x6);\n    global.tree = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_x) {\n  \"use strict\";\n\n  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\n  function _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\n  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\n  function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n  function _instanceof(left, right) { if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) { return !!right[Symbol.hasInstance](left); } else { return left instanceof right; } }\n\n  function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n  function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\n  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\n  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n  function _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n  // 定义节点\n  var TreeNode = /*#__PURE__*/function (_Node) {\n    _inherits(TreeNode, _Node);\n\n    var _super = _createSuper(TreeNode);\n\n    function TreeNode() {\n      var _this;\n\n      _classCallCheck(this, TreeNode);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n\n      _defineProperty(_assertThisInitialized(_this), \"collapsed\", false);\n\n      return _this;\n    }\n\n    _createClass(TreeNode, [{\n      key: \"postprocess\",\n      value: function postprocess() {\n        this.toggleCollapse(false);\n      }\n    }, {\n      key: \"isCollapsed\",\n      value: function isCollapsed() {\n        return this.collapsed;\n      }\n    }, {\n      key: \"toggleButtonVisibility\",\n      value: function toggleButtonVisibility(visible) {\n        this.attr('buttonGroup', {\n          display: visible ? 'block' : 'none'\n        });\n      }\n    }, {\n      key: \"toggleCollapse\",\n      value: function toggleCollapse(collapsed) {\n        var target = collapsed == null ? !this.collapsed : collapsed;\n\n        if (!target) {\n          this.attr('buttonSign', {\n            d: 'M 1 5 9 5 M 5 1 5 9',\n            strokeWidth: 1.6\n          });\n        } else {\n          this.attr('buttonSign', {\n            d: 'M 2 5 8 5',\n            strokeWidth: 1.8\n          });\n        }\n\n        this.collapsed = target;\n      }\n    }]);\n\n    return TreeNode;\n  }(_x.Node);\n\n  TreeNode.config({\n    zIndex: 2,\n    markup: [{\n      tagName: 'g',\n      selector: 'buttonGroup',\n      children: [{\n        tagName: 'rect',\n        selector: 'button',\n        attrs: {\n          'pointer-events': 'visiblePainted'\n        }\n      }, {\n        tagName: 'path',\n        selector: 'buttonSign',\n        attrs: {\n          fill: 'none',\n          'pointer-events': 'none'\n        }\n      }]\n    }, {\n      tagName: 'rect',\n      selector: 'body'\n    }, {\n      tagName: 'text',\n      selector: 'label'\n    }],\n    attrs: {\n      body: {\n        refWidth: '100%',\n        refHeight: '100%',\n        strokeWidth: 1,\n        fill: '#ffffff',\n        stroke: '#a0a0a0'\n      },\n      label: {\n        textWrap: {\n          ellipsis: true,\n          width: -10\n        },\n        textAnchor: 'middle',\n        textVerticalAnchor: 'middle',\n        refX: '50%',\n        refY: '50%',\n        fontSize: 12\n      },\n      buttonGroup: {\n        refX: '100%',\n        refY: '50%'\n      },\n      button: {\n        fill: '#4C65DD',\n        stroke: 'none',\n        x: -10,\n        y: -10,\n        height: 20,\n        width: 30,\n        rx: 10,\n        ry: 10,\n        cursor: 'pointer',\n        event: 'node:collapse'\n      },\n      buttonSign: {\n        refX: 5,\n        refY: -5,\n        stroke: '#FFFFFF',\n        strokeWidth: 1.6\n      }\n    }\n  }); // 定义边\n\n  var TreeEdge = /*#__PURE__*/function (_Shape$Edge) {\n    _inherits(TreeEdge, _Shape$Edge);\n\n    var _super2 = _createSuper(TreeEdge);\n\n    function TreeEdge() {\n      _classCallCheck(this, TreeEdge);\n\n      return _super2.apply(this, arguments);\n    }\n\n    _createClass(TreeEdge, [{\n      key: \"isHidden\",\n      value: function isHidden() {\n        var node = this.getTargetNode();\n        return !node || !node.isVisible();\n      }\n    }]);\n\n    return TreeEdge;\n  }(_x.Shape.Edge);\n\n  TreeEdge.config({\n    zIndex: 1,\n    attrs: {\n      line: {\n        stroke: '#a0a0a0',\n        strokeWidth: 1,\n        targetMarker: null\n      }\n    }\n  }); // 注册\n\n  _x.Node.registry.register('tree-node', TreeNode, true);\n\n  _x.Edge.registry.register('tree-edge', TreeEdge, true); // 初始化画布\n\n\n  var graph = new _x.Graph({\n    container: document.getElementById('container'),\n    grid: 1,\n    async: true,\n    frozen: true,\n    scroller: true,\n    interacting: false,\n    background: {\n      color: '#f5f5f5'\n    },\n    connecting: {\n      anchor: 'orth',\n      connector: 'rounded',\n      connectionPoint: 'boundary',\n      router: {\n        name: 'er',\n        args: {\n          offset: 24,\n          direction: 'H'\n        }\n      }\n    }\n  });\n  graph.on('node:collapse', function (_ref) {\n    var node = _ref.node;\n    node.toggleCollapse();\n    var collapsed = node.isCollapsed();\n\n    var run = function run(pre) {\n      var succ = graph.getSuccessors(pre, {\n        distance: 1\n      });\n\n      if (succ) {\n        succ.forEach(function (node) {\n          node.toggleVisible(!collapsed);\n\n          if (!node.isCollapsed()) {\n            run(node);\n          }\n        });\n      }\n    };\n\n    run(node);\n  });\n  fetch('../data/mindmap.json').then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    var start = new Date().getTime();\n    var nodes = data.nodes.map(function (_ref2) {\n      var leaf = _ref2.leaf,\n          metadata = _objectWithoutProperties(_ref2, [\"leaf\"]);\n\n      var node = new TreeNode(metadata);\n\n      if (leaf) {\n        node.toggleButtonVisibility(leaf === false);\n      }\n\n      return node;\n    });\n    var edges = data.edges.map(function (edge) {\n      return new TreeEdge({\n        source: edge.source,\n        target: edge.target\n      });\n    });\n    graph.resetCells([].concat(_toConsumableArray(nodes), _toConsumableArray(edges)));\n    graph.unfreeze({\n      progress: function progress(_ref3) {\n        var done = _ref3.done;\n\n        if (done) {\n          var time = new Date().getTime() - start;\n          console.log(time);\n          graph.unfreeze({\n            batchSize: 50\n          });\n          graph.zoomToFit({\n            padding: 24\n          });\n        }\n      }\n    });\n  });\n});"},{"relativePath":"showcase/practices/demo/org.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/showcase/practices/demo/org.ts","order":3,"filename":"org.ts","title":{"zh":"组织架构图","en":"Organizational Charts"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*mxDSTpxbMYYAAAAAAAAAAAAAARQnAQ","source":"import { Graph, Node, Point } from '@antv/x6'\n\nGraph.registerNode(\n  'org-node',\n  {\n    width: 180,\n    height: 60,\n    markup: [\n      {\n        tagName: 'rect',\n        selector: 'body',\n      },\n      {\n        tagName: 'image',\n        selector: 'avatar',\n      },\n      {\n        tagName: 'text',\n        selector: 'rank',\n      },\n      {\n        tagName: 'text',\n        selector: 'name',\n      },\n    ],\n    attrs: {\n      body: {\n        refWidth: '100%',\n        refHeight: '100%',\n        fill: '#FFFFFF',\n        stroke: '#000000',\n        strokeWidth: 2,\n        rx: 10,\n        ry: 10,\n        pointerEvents: 'visiblePainted',\n      },\n      avatar: {\n        width: 48,\n        height: 48,\n        refX: 8,\n        refY: 6,\n      },\n      rank: {\n        refX: 0.9,\n        refY: 0.2,\n        fontFamily: 'Courier New',\n        fontSize: 14,\n        textAnchor: 'end',\n        textDecoration: 'underline',\n      },\n      name: {\n        refX: 0.9,\n        refY: 0.6,\n        fontFamily: 'Courier New',\n        fontSize: 14,\n        fontWeight: '800',\n        textAnchor: 'end',\n      },\n    },\n  },\n  true,\n)\n\nGraph.registerEdge(\n  'org-edge',\n  {\n    zIndex: -1,\n    attrs: {\n      line: {\n        fill: 'none',\n        strokeLinejoin: 'round',\n        strokeWidth: '2',\n        stroke: '#4b4a67',\n        sourceMarker: null,\n        targetMarker: null,\n      },\n    },\n  },\n  true,\n)\n\nconst graph = new Graph({\n  container: document.getElementById('container'),\n  grid: true,\n  connecting: {\n    anchor: 'orth',\n  },\n})\n\nfunction member(\n  x: number,\n  y: number,\n  rank: string,\n  name: string,\n  image: string,\n  background: string,\n  textColor: string = '#000',\n) {\n  return graph.addNode({\n    x,\n    y,\n    shape: 'org-node',\n    attrs: {\n      body: {\n        fill: background,\n        stroke: 'none',\n      },\n      avatar: {\n        opacity: 0.7,\n        'xlink:href': image,\n      },\n      rank: {\n        text: rank,\n        fill: textColor,\n        wordSpacing: '-5px',\n        letterSpacing: 0,\n      },\n      name: {\n        text: name,\n        fill: textColor,\n        fontSize: 13,\n        fontFamily: 'Arial',\n        letterSpacing: 0,\n      },\n    },\n  })\n}\n\nfunction link(source: Node, target: Node, vertices: Point.PointLike[]) {\n  return graph.addEdge({\n    vertices,\n    source: { cell: source },\n    target: { cell: target },\n    shape: 'org-edge',\n  })\n}\n\nconst male =\n  'https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*kUy8SrEDp6YAAAAAAAAAAAAAARQnAQ'\nconst female =\n  'https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*f6hhT75YjkIAAAAAAAAAAAAAARQnAQ'\n\nconst bart = member(300, 70, 'CEO', 'Bart Simpson', male, '#30d0c6')\nconst homer = member(\n  90,\n  200,\n  'VP Marketing',\n  'Homer Simpson',\n  male,\n  '#7c68fd',\n  '#f1f1f1',\n)\nconst marge = member(\n  300,\n  200,\n  'VP Sales',\n  'Marge Simpson',\n  female,\n  '#7c68fd',\n  '#f1f1f1',\n)\nconst lisa = member(\n  500,\n  200,\n  'VP Production',\n  'Lisa Simpson',\n  female,\n  '#7c68fd',\n  '#f1f1f1',\n)\nconst maggie = member(400, 350, 'Manager', 'Maggie Simpson', female, '#feb563')\nconst lenny = member(190, 350, 'Manager', 'Lenny Leonard', male, '#feb563')\nconst carl = member(190, 500, 'Manager', 'Carl Carlson', male, '#feb563')\n\nlink(bart, marge, [{ x: 385, y: 180 }])\nlink(bart, homer, [\n  { x: 385, y: 180 },\n  { x: 175, y: 180 },\n])\nlink(bart, lisa, [\n  { x: 385, y: 180 },\n  { x: 585, y: 180 },\n])\nlink(homer, lenny, [{ x: 175, y: 380 }])\nlink(homer, carl, [{ x: 175, y: 530 }])\nlink(marge, maggie, [{ x: 385, y: 380 }])\n","babeledSource":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/x6\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/x6\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.x6);\n    global.org = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_x) {\n  \"use strict\";\n\n  _x.Graph.registerNode('org-node', {\n    width: 180,\n    height: 60,\n    markup: [{\n      tagName: 'rect',\n      selector: 'body'\n    }, {\n      tagName: 'image',\n      selector: 'avatar'\n    }, {\n      tagName: 'text',\n      selector: 'rank'\n    }, {\n      tagName: 'text',\n      selector: 'name'\n    }],\n    attrs: {\n      body: {\n        refWidth: '100%',\n        refHeight: '100%',\n        fill: '#FFFFFF',\n        stroke: '#000000',\n        strokeWidth: 2,\n        rx: 10,\n        ry: 10,\n        pointerEvents: 'visiblePainted'\n      },\n      avatar: {\n        width: 48,\n        height: 48,\n        refX: 8,\n        refY: 6\n      },\n      rank: {\n        refX: 0.9,\n        refY: 0.2,\n        fontFamily: 'Courier New',\n        fontSize: 14,\n        textAnchor: 'end',\n        textDecoration: 'underline'\n      },\n      name: {\n        refX: 0.9,\n        refY: 0.6,\n        fontFamily: 'Courier New',\n        fontSize: 14,\n        fontWeight: '800',\n        textAnchor: 'end'\n      }\n    }\n  }, true);\n\n  _x.Graph.registerEdge('org-edge', {\n    zIndex: -1,\n    attrs: {\n      line: {\n        fill: 'none',\n        strokeLinejoin: 'round',\n        strokeWidth: '2',\n        stroke: '#4b4a67',\n        sourceMarker: null,\n        targetMarker: null\n      }\n    }\n  }, true);\n\n  var graph = new _x.Graph({\n    container: document.getElementById('container'),\n    grid: true,\n    connecting: {\n      anchor: 'orth'\n    }\n  });\n\n  function member(x, y, rank, name, image, background) {\n    var textColor = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '#000';\n    return graph.addNode({\n      x: x,\n      y: y,\n      shape: 'org-node',\n      attrs: {\n        body: {\n          fill: background,\n          stroke: 'none'\n        },\n        avatar: {\n          opacity: 0.7,\n          'xlink:href': image\n        },\n        rank: {\n          text: rank,\n          fill: textColor,\n          wordSpacing: '-5px',\n          letterSpacing: 0\n        },\n        name: {\n          text: name,\n          fill: textColor,\n          fontSize: 13,\n          fontFamily: 'Arial',\n          letterSpacing: 0\n        }\n      }\n    });\n  }\n\n  function link(source, target, vertices) {\n    return graph.addEdge({\n      vertices: vertices,\n      source: {\n        cell: source\n      },\n      target: {\n        cell: target\n      },\n      shape: 'org-edge'\n    });\n  }\n\n  var male = 'https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*kUy8SrEDp6YAAAAAAAAAAAAAARQnAQ';\n  var female = 'https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*f6hhT75YjkIAAAAAAAAAAAAAARQnAQ';\n  var bart = member(300, 70, 'CEO', 'Bart Simpson', male, '#30d0c6');\n  var homer = member(90, 200, 'VP Marketing', 'Homer Simpson', male, '#7c68fd', '#f1f1f1');\n  var marge = member(300, 200, 'VP Sales', 'Marge Simpson', female, '#7c68fd', '#f1f1f1');\n  var lisa = member(500, 200, 'VP Production', 'Lisa Simpson', female, '#7c68fd', '#f1f1f1');\n  var maggie = member(400, 350, 'Manager', 'Maggie Simpson', female, '#feb563');\n  var lenny = member(190, 350, 'Manager', 'Lenny Leonard', male, '#feb563');\n  var carl = member(190, 500, 'Manager', 'Carl Carlson', male, '#feb563');\n  link(bart, marge, [{\n    x: 385,\n    y: 180\n  }]);\n  link(bart, homer, [{\n    x: 385,\n    y: 180\n  }, {\n    x: 175,\n    y: 180\n  }]);\n  link(bart, lisa, [{\n    x: 385,\n    y: 180\n  }, {\n    x: 585,\n    y: 180\n  }]);\n  link(homer, lenny, [{\n    x: 175,\n    y: 380\n  }]);\n  link(homer, carl, [{\n    x: 175,\n    y: 530\n  }]);\n  link(marge, maggie, [{\n    x: 385,\n    y: 380\n  }]);\n});"},{"relativePath":"showcase/practices/demo/orgchart.ts","absolutePath":"/home/runner/work/X6/X6/sites/x6-sites/examples/showcase/practices/demo/orgchart.ts","order":4,"filename":"orgchart.ts","title":{"zh":"组织架构图（自动布局）","en":"Organizational Charts"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*w5SUSIvTxPAAAAAAAAAAAAAAARQnAQ","source":"import { Graph, Cell, Node, Color, Dom } from '@antv/x6'\nimport dagre from 'dagre'\nimport insertCss from 'insert-css'\n\n// 定义样式\ninsertCss(`\n  .x6-cell {\n    cursor: default;\n  }\n  .x6-node .btn {\n    cursor: pointer;\n  }\n`)\n\n// 自定义节点\nGraph.registerNode(\n  'org-node',\n  {\n    width: 260,\n    height: 88,\n    markup: [\n      {\n        tagName: 'rect',\n        attrs: {\n          class: 'card',\n        },\n      },\n      {\n        tagName: 'image',\n        attrs: {\n          class: 'image',\n        },\n      },\n      {\n        tagName: 'text',\n        attrs: {\n          class: 'rank',\n        },\n      },\n      {\n        tagName: 'text',\n        attrs: {\n          class: 'name',\n        },\n      },\n      {\n        tagName: 'g',\n        attrs: {\n          class: 'btn add',\n        },\n        children: [\n          {\n            tagName: 'circle',\n            attrs: {\n              class: 'add',\n            },\n          },\n          {\n            tagName: 'text',\n            attrs: {\n              class: 'add',\n            },\n          },\n        ],\n      },\n      {\n        tagName: 'g',\n        attrs: {\n          class: 'btn del',\n        },\n        children: [\n          {\n            tagName: 'circle',\n            attrs: {\n              class: 'del',\n            },\n          },\n          {\n            tagName: 'text',\n            attrs: {\n              class: 'del',\n            },\n          },\n        ],\n      },\n    ],\n    attrs: {\n      '.card': {\n        rx: 10,\n        ry: 10,\n        refWidth: '100%',\n        refHeight: '100%',\n        fill: '#FFF',\n        stroke: '#000',\n        strokeWidth: 0,\n        pointerEvents: 'visiblePainted',\n      },\n      '.image': {\n        x: 16,\n        y: 16,\n        width: 56,\n        height: 56,\n        opacity: 0.7,\n      },\n      '.rank': {\n        refX: 0.95,\n        refY: 0.5,\n        fontFamily: 'Courier New',\n        fontSize: 13,\n        textAnchor: 'end',\n        textVerticalAnchor: 'middle',\n      },\n      '.name': {\n        refX: 0.95,\n        refY: 0.7,\n        fontFamily: 'Arial',\n        fontSize: 14,\n        fontWeight: '600',\n        textAnchor: 'end',\n      },\n      '.btn.add': {\n        refDx: -16,\n        refY: 16,\n        event: 'node:add',\n      },\n      '.btn.del': {\n        refDx: -44,\n        refY: 16,\n        event: 'node:delete',\n      },\n      '.btn > circle': {\n        r: 10,\n        fill: 'transparent',\n        stroke: '#333',\n        strokeWidth: 1,\n      },\n      '.btn.add > text': {\n        fontSize: 20,\n        fontWeight: 800,\n        stroke: '#000',\n        x: -5.5,\n        y: 7,\n        fontFamily: 'Times New Roman',\n        text: '+',\n      },\n      '.btn.del > text': {\n        fontSize: 28,\n        fontWeight: 500,\n        stroke: '#000',\n        x: -4.5,\n        y: 6,\n        fontFamily: 'Times New Roman',\n        text: '-',\n      },\n    },\n  },\n  true,\n)\n\n// 自定义边\nGraph.registerEdge(\n  'org-edge',\n  {\n    zIndex: -1,\n    attrs: {\n      line: {\n        stroke: '#585858',\n        strokeWidth: 3,\n        sourceMarker: null,\n        targetMarker: null,\n      },\n    },\n  },\n  true,\n)\n\nconst male =\n  'https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*kUy8SrEDp6YAAAAAAAAAAAAAARQnAQ'\nconst female =\n  'https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*f6hhT75YjkIAAAAAAAAAAAAAARQnAQ'\n// 布局方向\nconst dir = 'LR' // LR RL TB BT\n\n// 创建画布\nconst graph = new Graph({\n  container: document.getElementById('container'),\n  grid: true,\n  scroller: true,\n  snapline: true,\n  interacting: false,\n})\n\n// 监听自定义事件\nfunction setup() {\n  graph.on('node:add', ({ e, node }) => {\n    e.stopPropagation()\n    const bg = Color.randomHex()\n    const member = createNode(\n      'Employee',\n      'New Employee',\n      Math.random() < 0.5 ? male : female,\n      bg,\n      Color.invert(bg, true),\n    )\n    graph.freeze()\n    graph.addCell([member, createEdge(node, member)])\n    layout()\n  })\n\n  graph.on('node:delete', ({ e, node }) => {\n    e.stopPropagation()\n    graph.freeze()\n    graph.removeCell(node)\n    layout()\n  })\n}\n\n// 自动布局\nfunction layout() {\n  const nodes = graph.getNodes()\n  const edges = graph.getEdges()\n  const g = new dagre.graphlib.Graph()\n  g.setGraph({ rankdir: dir, nodesep: 16, ranksep: 16 })\n  g.setDefaultEdgeLabel(() => ({}))\n\n  const width = 260\n  const height = 90\n  nodes.forEach((node) => {\n    g.setNode(node.id, { width, height })\n  })\n\n  edges.forEach((edge) => {\n    const source = edge.getSource()\n    const target = edge.getTarget()\n    g.setEdge(source.cell, target.cell)\n  })\n\n  dagre.layout(g)\n\n  graph.freeze()\n\n  g.nodes().forEach((id) => {\n    const node = graph.getCell(id) as Node\n    if (node) {\n      const pos = g.node(id)\n      node.position(pos.x, pos.y)\n    }\n  })\n\n  edges.forEach((edge) => {\n    const source = edge.getSourceNode()!\n    const target = edge.getTargetNode()!\n    const sourceBBox = source.getBBox()\n    const targetBBox = target.getBBox()\n\n    console.log(sourceBBox, targetBBox)\n\n    if ((dir === 'LR' || dir === 'RL') && sourceBBox.y !== targetBBox.y) {\n      const gap =\n        dir === 'LR'\n          ? targetBBox.x - sourceBBox.x - sourceBBox.width\n          : -sourceBBox.x + targetBBox.x + targetBBox.width\n      const fix = dir === 'LR' ? sourceBBox.width : 0\n      const x = sourceBBox.x + fix + gap / 2\n      edge.setVertices([\n        { x, y: sourceBBox.center.y },\n        { x, y: targetBBox.center.y },\n      ])\n    } else if (\n      (dir === 'TB' || dir === 'BT') &&\n      sourceBBox.x !== targetBBox.x\n    ) {\n      const gap =\n        dir === 'TB'\n          ? targetBBox.y - sourceBBox.y - sourceBBox.height\n          : -sourceBBox.y + targetBBox.y + targetBBox.height\n      const fix = dir === 'TB' ? sourceBBox.height : 0\n      const y = sourceBBox.y + fix + gap / 2\n      edge.setVertices([\n        { x: sourceBBox.center.x, y },\n        { x: targetBBox.center.x, y },\n      ])\n    } else {\n      edge.setVertices([])\n    }\n  })\n\n  graph.unfreeze()\n}\n\nfunction createNode(\n  rank: string,\n  name: string,\n  image: string,\n  background: string,\n  textColor = '#000',\n) {\n  return graph.createNode({\n    shape: 'org-node',\n    attrs: {\n      '.card': { fill: background },\n      '.image': { xlinkHref: image },\n      '.rank': {\n        fill: textColor,\n        text: Dom.breakText(rank, { width: 160, height: 45 }),\n      },\n      '.name': {\n        fill: textColor,\n        text: Dom.breakText(name, { width: 160, height: 45 }),\n      },\n      '.btn > circle': { stroke: textColor },\n      '.btn > text': { fill: textColor, stroke: textColor },\n    },\n  })\n}\n\nfunction createEdge(source: Cell, target: Cell) {\n  return graph.createEdge({\n    shape: 'org-edge',\n    source: { cell: source.id },\n    target: { cell: target.id },\n  })\n}\n\nconst nodes = [\n  createNode('Founder & Chairman', 'Pierre Omidyar', male, '#31d0c6'),\n  createNode('President & CEO', 'Margaret C. Whitman', female, '#31d0c6'),\n  createNode('President, PayPal', 'Scott Thompson', male, '#7c68fc'),\n  createNode(\n    'President, Ebay Global Marketplaces',\n    'Devin Wenig',\n    male,\n    '#7c68fc',\n  ),\n  createNode(\n    'Senior Vice President Human Resources',\n    'Jeffrey S. Skoll',\n    male,\n    '#fe854f',\n  ),\n  createNode(\n    'Senior Vice President Controller',\n    'Steven P. Westly',\n    male,\n    '#feb663',\n  ),\n]\n\nconst edges = [\n  createEdge(nodes[0], nodes[1]),\n  createEdge(nodes[1], nodes[2]),\n  createEdge(nodes[1], nodes[3]),\n  createEdge(nodes[1], nodes[4]),\n  createEdge(nodes[1], nodes[5]),\n]\n\ngraph.resetCells([...nodes, ...edges])\nlayout()\ngraph.zoomTo(0.8)\ngraph.centerContent()\nsetup()\n","babeledSource":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/x6\", \"dagre\", \"insert-css\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/x6\"), require(\"dagre\"), require(\"insert-css\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.x6, global.dagre, global.insertCss);\n    global.orgchart = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_x, _dagre, _insertCss) {\n  \"use strict\";\n\n  _dagre = _interopRequireDefault(_dagre);\n  _insertCss = _interopRequireDefault(_insertCss);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  // 定义样式\n  (0, _insertCss.default)(\"\\n  .x6-cell {\\n    cursor: default;\\n  }\\n  .x6-node .btn {\\n    cursor: pointer;\\n  }\\n\"); // 自定义节点\n\n  _x.Graph.registerNode('org-node', {\n    width: 260,\n    height: 88,\n    markup: [{\n      tagName: 'rect',\n      attrs: {\n        class: 'card'\n      }\n    }, {\n      tagName: 'image',\n      attrs: {\n        class: 'image'\n      }\n    }, {\n      tagName: 'text',\n      attrs: {\n        class: 'rank'\n      }\n    }, {\n      tagName: 'text',\n      attrs: {\n        class: 'name'\n      }\n    }, {\n      tagName: 'g',\n      attrs: {\n        class: 'btn add'\n      },\n      children: [{\n        tagName: 'circle',\n        attrs: {\n          class: 'add'\n        }\n      }, {\n        tagName: 'text',\n        attrs: {\n          class: 'add'\n        }\n      }]\n    }, {\n      tagName: 'g',\n      attrs: {\n        class: 'btn del'\n      },\n      children: [{\n        tagName: 'circle',\n        attrs: {\n          class: 'del'\n        }\n      }, {\n        tagName: 'text',\n        attrs: {\n          class: 'del'\n        }\n      }]\n    }],\n    attrs: {\n      '.card': {\n        rx: 10,\n        ry: 10,\n        refWidth: '100%',\n        refHeight: '100%',\n        fill: '#FFF',\n        stroke: '#000',\n        strokeWidth: 0,\n        pointerEvents: 'visiblePainted'\n      },\n      '.image': {\n        x: 16,\n        y: 16,\n        width: 56,\n        height: 56,\n        opacity: 0.7\n      },\n      '.rank': {\n        refX: 0.95,\n        refY: 0.5,\n        fontFamily: 'Courier New',\n        fontSize: 13,\n        textAnchor: 'end',\n        textVerticalAnchor: 'middle'\n      },\n      '.name': {\n        refX: 0.95,\n        refY: 0.7,\n        fontFamily: 'Arial',\n        fontSize: 14,\n        fontWeight: '600',\n        textAnchor: 'end'\n      },\n      '.btn.add': {\n        refDx: -16,\n        refY: 16,\n        event: 'node:add'\n      },\n      '.btn.del': {\n        refDx: -44,\n        refY: 16,\n        event: 'node:delete'\n      },\n      '.btn > circle': {\n        r: 10,\n        fill: 'transparent',\n        stroke: '#333',\n        strokeWidth: 1\n      },\n      '.btn.add > text': {\n        fontSize: 20,\n        fontWeight: 800,\n        stroke: '#000',\n        x: -5.5,\n        y: 7,\n        fontFamily: 'Times New Roman',\n        text: '+'\n      },\n      '.btn.del > text': {\n        fontSize: 28,\n        fontWeight: 500,\n        stroke: '#000',\n        x: -4.5,\n        y: 6,\n        fontFamily: 'Times New Roman',\n        text: '-'\n      }\n    }\n  }, true); // 自定义边\n\n\n  _x.Graph.registerEdge('org-edge', {\n    zIndex: -1,\n    attrs: {\n      line: {\n        stroke: '#585858',\n        strokeWidth: 3,\n        sourceMarker: null,\n        targetMarker: null\n      }\n    }\n  }, true);\n\n  var male = 'https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*kUy8SrEDp6YAAAAAAAAAAAAAARQnAQ';\n  var female = 'https://gw.alipayobjects.com/mdn/rms_43231b/afts/img/A*f6hhT75YjkIAAAAAAAAAAAAAARQnAQ'; // 布局方向\n\n  var dir = 'LR'; // LR RL TB BT\n  // 创建画布\n\n  var graph = new _x.Graph({\n    container: document.getElementById('container'),\n    grid: true,\n    scroller: true,\n    snapline: true,\n    interacting: false\n  }); // 监听自定义事件\n\n  function setup() {\n    graph.on('node:add', function (_ref) {\n      var e = _ref.e,\n          node = _ref.node;\n      e.stopPropagation();\n\n      var bg = _x.Color.randomHex();\n\n      var member = createNode('Employee', 'New Employee', Math.random() < 0.5 ? male : female, bg, _x.Color.invert(bg, true));\n      graph.freeze();\n      graph.addCell([member, createEdge(node, member)]);\n      layout();\n    });\n    graph.on('node:delete', function (_ref2) {\n      var e = _ref2.e,\n          node = _ref2.node;\n      e.stopPropagation();\n      graph.freeze();\n      graph.removeCell(node);\n      layout();\n    });\n  } // 自动布局\n\n\n  function layout() {\n    var nodes = graph.getNodes();\n    var edges = graph.getEdges();\n    var g = new _dagre.default.graphlib.Graph();\n    g.setGraph({\n      rankdir: dir,\n      nodesep: 16,\n      ranksep: 16\n    });\n    g.setDefaultEdgeLabel(function () {\n      return {};\n    });\n    var width = 260;\n    var height = 90;\n    nodes.forEach(function (node) {\n      g.setNode(node.id, {\n        width: width,\n        height: height\n      });\n    });\n    edges.forEach(function (edge) {\n      var source = edge.getSource();\n      var target = edge.getTarget();\n      g.setEdge(source.cell, target.cell);\n    });\n\n    _dagre.default.layout(g);\n\n    graph.freeze();\n    g.nodes().forEach(function (id) {\n      var node = graph.getCell(id);\n\n      if (node) {\n        var pos = g.node(id);\n        node.position(pos.x, pos.y);\n      }\n    });\n    edges.forEach(function (edge) {\n      var source = edge.getSourceNode();\n      var target = edge.getTargetNode();\n      var sourceBBox = source.getBBox();\n      var targetBBox = target.getBBox();\n      console.log(sourceBBox, targetBBox);\n\n      if ((dir === 'LR' || dir === 'RL') && sourceBBox.y !== targetBBox.y) {\n        var gap = dir === 'LR' ? targetBBox.x - sourceBBox.x - sourceBBox.width : -sourceBBox.x + targetBBox.x + targetBBox.width;\n        var fix = dir === 'LR' ? sourceBBox.width : 0;\n        var x = sourceBBox.x + fix + gap / 2;\n        edge.setVertices([{\n          x: x,\n          y: sourceBBox.center.y\n        }, {\n          x: x,\n          y: targetBBox.center.y\n        }]);\n      } else if ((dir === 'TB' || dir === 'BT') && sourceBBox.x !== targetBBox.x) {\n        var _gap = dir === 'TB' ? targetBBox.y - sourceBBox.y - sourceBBox.height : -sourceBBox.y + targetBBox.y + targetBBox.height;\n\n        var _fix = dir === 'TB' ? sourceBBox.height : 0;\n\n        var y = sourceBBox.y + _fix + _gap / 2;\n        edge.setVertices([{\n          x: sourceBBox.center.x,\n          y: y\n        }, {\n          x: targetBBox.center.x,\n          y: y\n        }]);\n      } else {\n        edge.setVertices([]);\n      }\n    });\n    graph.unfreeze();\n  }\n\n  function createNode(rank, name, image, background) {\n    var textColor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '#000';\n    return graph.createNode({\n      shape: 'org-node',\n      attrs: {\n        '.card': {\n          fill: background\n        },\n        '.image': {\n          xlinkHref: image\n        },\n        '.rank': {\n          fill: textColor,\n          text: _x.Dom.breakText(rank, {\n            width: 160,\n            height: 45\n          })\n        },\n        '.name': {\n          fill: textColor,\n          text: _x.Dom.breakText(name, {\n            width: 160,\n            height: 45\n          })\n        },\n        '.btn > circle': {\n          stroke: textColor\n        },\n        '.btn > text': {\n          fill: textColor,\n          stroke: textColor\n        }\n      }\n    });\n  }\n\n  function createEdge(source, target) {\n    return graph.createEdge({\n      shape: 'org-edge',\n      source: {\n        cell: source.id\n      },\n      target: {\n        cell: target.id\n      }\n    });\n  }\n\n  var nodes = [createNode('Founder & Chairman', 'Pierre Omidyar', male, '#31d0c6'), createNode('President & CEO', 'Margaret C. Whitman', female, '#31d0c6'), createNode('President, PayPal', 'Scott Thompson', male, '#7c68fc'), createNode('President, Ebay Global Marketplaces', 'Devin Wenig', male, '#7c68fc'), createNode('Senior Vice President Human Resources', 'Jeffrey S. Skoll', male, '#fe854f'), createNode('Senior Vice President Controller', 'Steven P. Westly', male, '#feb663')];\n  var edges = [createEdge(nodes[0], nodes[1]), createEdge(nodes[1], nodes[2]), createEdge(nodes[1], nodes[3]), createEdge(nodes[1], nodes[4]), createEdge(nodes[1], nodes[5])];\n  graph.resetCells([].concat(nodes, edges));\n  layout();\n  graph.zoomTo(0.8);\n  graph.centerContent();\n  setup();\n});"}]},"description":""}},"staticQueryHashes":["1015175297","3000541721","3000541721","3378097331","638047554"]}